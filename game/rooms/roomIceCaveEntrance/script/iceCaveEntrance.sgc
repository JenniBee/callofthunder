// Global constants

// Global variables
var _dialogHarald;

// Enumerations
enum { HARALD_TOPIC_ROOT, N_HARALD_TOPICS };
enum { HARALD_LINE_TORCH, HARALD_LINE_BURN, HARALD_LINE_GET_OUT, HARALD_LINE_LEAVE };

// Object action functions
function objDoor_verb(var objA, var objB)
{
	action
	{
		case verbWalk:
			iceCaveEntrance = ICE_CAVE_DOOR_ENTRANCE;
			Room_load(roomIceCave);
			break;
	}
}

function objHole_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			Actor_talkEgo("That's way too high to climb.");
			break;
		case verbTalkTo:
			cutscene (CUTSCENE_TYPE_B)
			{
				Actor_talkEgo("Harald?");
				Script_waitForMessage();
				Actor_talk(actorHarald, "Yes?");
				Script_waitForMessage();
			}
			Dialog_setTopic(_dialogHarald, HARALD_TOPIC_ROOT);
			Dialog_show();
			break;
		case verbLookAt:
			Actor_talkEgo("That's the way I came into this cave.");
			break;
	}
}

function _roomIceCaveEntrance_haraldTopicRoot(var line)
{
	switch (line)
	{
		case HARALD_LINE_TORCH:
			// Get torch
			Actor_talk(actorHarald, "Okay, wait...");
			Script_waitForMessage();
			Script_delaySeconds(1);
			Actor_talk(actorHarald, "Catch it!");
			Script_waitForMessage();
			// TODO: fall down anim of torch
			Actor_pickup(invUnlitTorch);
			Actor_talkEgo("Thanks!");
			Script_waitForMessage();
			Dialog_removeLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_TORCH);
			break;
		case HARALD_LINE_BURN:
			Actor_talk(actorHarald, "But I already gave you the torch.");
			Script_waitForMessage();
			Actor_talkEgo("Yes, but I need something to burn that ice wall.");
			Script_waitForMessage();
			Actor_talk(actorHarald, "Burn what??");
			Script_waitForMessage();
			Actor_talkEgo("Don't we have a gas can?");
			Script_waitForMessage();
			Actor_talk(actorHarald, "Yes but why do you want to burn the ice?");
			Script_waitForMessage();
			Actor_talkEgo("Don't reck your brain, I'll tell you later.");
			Script_waitForMessage();
			Actor_talk(actorHarald, "Okay. One moment, I'll get the petrol.");
			Script_waitForMessage();
			Script_delaySeconds(5);
			Actor_talk(actorHarald, "Okay...");
			Script_waitForMessage();
			Actor_talk(actorHarald, "Catch it!");
			Script_waitForMessage();
			// TODO: fall down anim of can
			Actor_pickup(invGasCan);
			Actor_talkEgo("Thanks!");
			Script_waitForMessage();
			Dialog_removeLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_BURN);
			break;
		case HARALD_LINE_GET_OUT:
			Actor_talk(actorHarald, "The rope is too short.");
			Script_waitForMessage();
			Util_quit();
			break;
		case HARALD_LINE_LEAVE:
			Actor_talk(actorHarald, "I'll be here...");
			Script_waitForMessage();
			Dialog_hide();
			Actor_turnToDirection(ACTOR_DIR_SOUTH);
			break;
	}
}

// Public functions
inline function roomIceCaveEntrance_init()
{
	// Setup hole
	Object_setClass(objHole, classPerson, 1);
	Object_setState(objHole, OBJECT_STATE_UNTOUCHABLE);
	Object_setOwner(objHole, OBJECT_OWNER_ROOM);

	// Setup door
	Object_setState(objDoor, OBJECT_STATE_PICKABLE);
	Object_setOwner(objDoor, OBJECT_OWNER_ROOM);
	
	// Create dialog
	_dialogHarald = Dialog_new(N_HARALD_TOPICS);
	Dialog_addTopic(_dialogHarald, HARALD_TOPIC_ROOT, _roomIceCaveEntrance_haraldTopicRoot);
	Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_TORCH, "Throw me a torch, I can't see anything.");
	Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_BURN, "Harald, I need something flammable! [VISIBLE after LOOKAT ice]");
	Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_LEAVE, "I'll talk to you later.");
}

// Room entry function
function roomIceCaveEntrance_entry()
{
	const START_X = 216;
	const START_Y = 104;
	const HARALD_X = 150;
	const HARALD_Y = 5;
	
	// Disable Touch Mode
	Inventory_setTouchVerb(false);

	// Position Indy
	Actor_putAtXY(VAR_EGO, START_X, START_Y, VAR_ROOM);
	Actor_setDirection(ACTOR_DIR_WEST);

	// Position Harald
	Actor_putAtXY(actorHarald, HARALD_X, HARALD_Y, VAR_ROOM);
	
	// Enable sentence and inventory
	Sentence_enable();
	Inventory_enable();
	Sentence_show();
	Inventory_show();
	Input_enable();
}

// Room exit function
function roomIceCaveEntrance_exit()
{

}
