// Global constants
const OMNI_INTENSITY1 = 255;
const OMNI_INTENSITY2 = 10;
const OMNI_POS_X = 100;
const OMNI_POS_Y = 40;
const OMNI_RANGE = 25;
const AMBIENT_MIN_INTENSITY = 10;
const AMBIENT_MEDIUM_INTENSITY = 55;
const AMBIENT_MAX_INTENSITY = 255;
const AMBIENT_INTENSITY_STEP = 20;
const LIGHTNING_MIN_INTENSITY = 0;
const LIGHTNING_MAX_INTENSITY = 300;
const LIGHTNING_RANDOM = 200;

// Global variables
var iceCaveEntrance;
var _iceCaveEntranceOmniLight;
var _iceCaveAmbientLight;
var _iceCaveLightningLight;
var _iceCaveDarkArea;
var _iceCaveRingObjectArea;
var _iceCaveDaggerObjectArea;
var _iceCaveindyCostumeArea;
var _iceCaveAmbientLightIntensity;
var _iceCaveEntranceOmniLightIntensity;

// Enumerations
enum { ICE_CAVE_HOLE_ENTRANCE, ICE_CAVE_MECHANISM_ENTRANCE };

// Object action functions
function daggerObject_verb(var objA, var objB)
{
	const DELAY = 30;
	action
	{
		case verbLookAt:
			if (Object_getOwner(litTorchInvObject1) != VAR_EGO)
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_animate(actorIndy, indyCostume_pickUpLow);
					Script_delay(DELAY);
					Actor_talkEgo("OUCH!");
					Script_waitForMessage();
					Actor_talkEgo("It feels sharp!");
					asm { pushWordVar .word objA setObjectName .string "knife?" }
				}
			else
				Actor_talkEgo("That looks like a pretty sharp dagger.");
			break;
		case verbPickUp:
			cutscene (CUTSCENE_TYPE_A)
			{
				Actor_animate(actorIndy, indyCostume_pickUpLow);
				Script_delay(DELAY);
				Object_setState(objA, OBJECT_STATE_DISABLED);
				Actor_pickup(daggerInvObject);
				Actor_animate(actorIndy, indyCostume_stand);
			}
			break;
	}
}

function entranceObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			Actor_talkEgo("That's way too high to climb.");
			break;
		case verbTalkTo:
			_iceCaveRoom_entranceDialog();
			break;
	}
}

function iceObject_verb(var objA, var objB)
{
	const DELAY = 30;
	action
	{
		case verbLookAt:
			if (Object_getOwner(litTorchInvObject1) != VAR_EGO)
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_animate(actorIndy, indyCostume_pickUpMedium);
					Script_delay(DELAY);
					Actor_talkEgo("Brrr... it's cold.");
				}
			else
			{
				Room_fade(ROOM_FADE_DISSOLVE_EFFECT_1, ROOM_FADE_DISSOLVE_EFFECT_1);
				Room_load(iceCaveMechanismRoom);
			}
			break;
	}
}

function ringObject_verb(var objA, var objB)
{
	const DELAY = 30;
	action
	{
		case verbPickUp:
			cutscene (CUTSCENE_TYPE_A)
			{
				Actor_animate(actorIndy, indyCostume_pickUpLow);
				Script_delay(DELAY);
				Object_setState(objA, OBJECT_STATE_DISABLED);
				Actor_pickup(ringInvObject);
				Actor_animate(actorIndy, indyCostume_stand);
			}
			break;
		case verbLookAt:
			if (Object_getOwner(litTorchInvObject1) != VAR_EGO)
			{
				Actor_animate(actorIndy, indyCostume_pickUpLow);
				Script_delay(DELAY);
				Actor_talkEgo("Hmm, that's probably a ring.");
				asm { pushWordVar .word objA setObjectName .string "ring?" }
			}
			else
				Actor_talkEgo("Nice ring.");
			break;
	}
}

function skeletonObject_verb(var objA, var objB)
{
	const DELAY = 30;
	action
	{
		case verbLookAt:
			Actor_talkEgo("Poor guy. I wonder how long he's been lying here.");
			break;
		case verbPickUp:
			if (Object_getOwner(boneInvObject) == actorIndy)
				Actor_talkEgo("I already found what I needed.");
			else
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_talkEgo("Hmmm, I guess this bone could come in handy.");
					Script_waitForMessage();
					Actor_animate(actorIndy, indyCostume_pickUpLow);
					Script_delay(DELAY);
					Actor_pickup(boneInvObject);
					Actor_animate(actorIndy, indyCostume_stand);
				}
			break;
	}
}

function wallObject_verb(var objA, var objB)
{
	const DELAY = 30;
	action
	{
		case verbLookAt:
			if (Object_getOwner(litTorchInvObject1) != VAR_EGO)
					cutscene (CUTSCENE_TYPE_A)
					{
						Actor_animate(actorIndy, indyCostume_pickUpMedium);
						Script_delay(DELAY);
						Actor_talkEgo("It feels loose somehow.");
					}
			else
				Actor_talkEgo("It's loose.");
			break;
	}
}

// Private functions
function _iceCaveRoom_setupObjects()
{
	// Setup entrance
	Object_setClass(entranceObject, classPerson, 1);
	Object_setState(entranceObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(entranceObject, OBJECT_OWNER_ROOM);

	// Setup wall
	Object_setState(wallObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(wallObject, OBJECT_OWNER_ROOM);

	// Setup ring
	Object_setState(ringObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(ringObject, OBJECT_OWNER_ROOM);

	// Setup icy wall
	Object_setState(iceObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(iceObject, OBJECT_OWNER_ROOM);
	
	// Setup skeleton
	Object_setState(skeletonObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(skeletonObject, OBJECT_OWNER_ROOM);
	
	// Setup dagger
	Object_setState(daggerObject, OBJECT_STATE_PICKABLE);
	Object_setOwner(daggerObject, OBJECT_OWNER_ROOM);
}

function _iceCaveRoom_entranceDialog()
{
	const LINE_TORCH = 0;
	const LINE_LEAVE = 1;

	var dialog;
	var selection;

	// Setup dialogs first
	dialog = Dialog_new();
	Dialog_addLine(dialog, "Send me the torch!"); // LINE_TORCH
	Dialog_addLine(dialog, "I'll talk to you later."); // LINE_LEAVE

	// Remove torch line if necessary
	if (Object_getOwner(unlitTorchInvObject) == actorIndy)
		Dialog_removeLine(dialog, LINE_TORCH);

	// Talk to Harald
	cutscene (CUTSCENE_TYPE_B)
	{
		Actor_talkEgo("Harald?");
		Script_waitForMessage();
	}

	// Disable inventory and sentence
	Inventory_hide();
	Sentence_hide();
	Inventory_disable();
	Sentence_disable();
	Script_break();

	// Enable dialog area
	Dialog_enable();

	do
	{
		// Show our dialog lines
		Dialog_show(dialog);

		// Wait for a line selection
		selection = Dialog_waitForSelection(dialog);
		switch (selection)
		{
			case LINE_TORCH:
				// Get torch
				Script_delaySeconds(1);
				Actor_pickup(unlitTorchInvObject);
				Actor_talkEgo("Thanks!");
				Script_waitForMessage();
				Dialog_removeLine(dialog, LINE_TORCH);
				break;
			case LINE_LEAVE:
				Actor_setDirection(ACTOR_DIR_SOUTH);
				break;
		}
	}
	while (selection != LINE_LEAVE);

	// Delete dialog lines
	Dialog_delete(dialog);

	// Disable dialog area
	Dialog_disable();

	// Re-enable sentence and inventory
	Sentence_enable();
	Inventory_enable();
	Sentence_show();
	Inventory_show();
}

inline function _iceCaveRoom_setupLights()
{
	// Add omni light
	_iceCaveEntranceOmniLight = Light_new(LIGHT_TYPE_OMNI);
	Light_setColor(_iceCaveEntranceOmniLight, OMNI_INTENSITY1, OMNI_INTENSITY1, OMNI_INTENSITY1);
	Light_setPos(_iceCaveEntranceOmniLight, OMNI_POS_X, OMNI_POS_Y);
	Light_setRange(_iceCaveEntranceOmniLight, OMNI_RANGE);

	// Add ambient light
	_iceCaveAmbientLight = Light_new(LIGHT_TYPE_AMBIENT);
	Light_setColor(_iceCaveAmbientLight, AMBIENT_MIN_INTENSITY, AMBIENT_MIN_INTENSITY, AMBIENT_MIN_INTENSITY);

	// Add lightning light
	_iceCaveLightningLight = Light_new(LIGHT_TYPE_AMBIENT);
	Light_setColor(_iceCaveLightningLight, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY);

	// Add areas
	_iceCaveDarkArea = Light_addArea(0, darkArea_start, darkArea_end);
	_iceCaveRingObjectArea = Light_addArea(0, ringObjectArea_start, ringObjectArea_end);
	_iceCaveDaggerObjectArea = Light_addArea(0, daggerObjectArea_start, daggerObjectArea_end);
	_iceCaveindyCostumeArea = Light_addArea(actorIndy, indyCostumeArea_start, indyCostumeArea_end);
}

thread _iceCaveRoom_lightThread()
{
	var i;
	var torchLit;
	var ambientLightIntensity;

	// Initialize torch state
	torchLit = (Object_getOwner(litTorchInvObject1) == VAR_EGO);

	// Loop and change intensity of the room
	while (1)
	{
		// Increase the room intensity
		if (ambientLightIntensity < AMBIENT_MEDIUM_INTENSITY)
		{
			Light_setColor(_iceCaveAmbientLight, ambientLightIntensity, ambientLightIntensity, ambientLightIntensity);
			ambientLightIntensity++;
		}

		// Thunder strike
		Light_setColor(_iceCaveLightningLight, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY);
		if (Util_getRandomNumber(LIGHTNING_RANDOM) == 0)
		{
			Light_setColor(_iceCaveLightningLight, LIGHTNING_MAX_INTENSITY, LIGHTNING_MAX_INTENSITY, LIGHTNING_MAX_INTENSITY);
			Util_printDebug("%V{thunderstrike}");
			if (!torchLit)
				ambientLightIntensity = AMBIENT_MIN_INTENSITY;
		}

		// Check if we just got the torch
		if (!torchLit && (Object_getOwner(litTorchInvObject1) == VAR_EGO))
		{
			// Brighten the ice cave room completely
			for (i = AMBIENT_MEDIUM_INTENSITY; i < AMBIENT_MAX_INTENSITY; i += AMBIENT_INTENSITY_STEP)
			{
				ambientLightIntensity = i;
				Light_setColor(_iceCaveAmbientLight, ambientLightIntensity, ambientLightIntensity, ambientLightIntensity);
				Script_break();
			}

			// Change omni light intensity
			Light_setColor(_iceCaveEntranceOmniLight, OMNI_INTENSITY2, OMNI_INTENSITY2, OMNI_INTENSITY2);

			// Change room object names
			asm { pushWord .word daggerObject setObjectName .string "dagger" }
			asm { pushWord .word ringObject setObjectName .string "ring" }

			// Disable inventory touch mode
			Inventory_setTouchVerb(0);
			Inventory_show();
	
			Actor_talkEgo("And then there was light...");

			// Set torch state
			torchLit = 1;
		}

		Script_break();
	}
}

// Room entry function
function iceCaveRoom_entry()
{
	const START_X = 96;
	const START_Y = 48;

	if (iceCaveEntrance == ICE_CAVE_HOLE_ENTRANCE)
	{
		// Setup lights first
		_iceCaveRoom_setupLights();
	
		// Setup object states, classes and owners
		_iceCaveRoom_setupObjects();

		// Position Indy
		Actor_setCurrent(VAR_EGO);
		Actor_putAtXY(VAR_EGO, START_X, START_Y, VAR_ROOM);
		Actor_setDirection(ACTOR_DIR_SOUTH);

		// Give default items to Indy
		Actor_pickup(whipInvObject);
		Actor_pickup(matchesInvObject);

		// Set inventory touch mode and enable inventory and input
		Inventory_setTouchVerb(1);
		Sentence_enable();
		Inventory_enable();
		Sentence_show();
		Inventory_show();
		Input_enable();

		// TODO: Fall down and stand up animation *OUCH*
		Interface_printLineLoadDefault();
		Interface_printLineColor(COLOR_DODGER_BLUE);
		Interface_printLineAt(20, 3);
		Interface_printLineLeft();
		Interface_printLine("Everything alright Indy?");
		Script_waitForMessage();
		Actor_talkEgo("It's ok.");
		Script_waitForMessage();

		// Launch lightning thread
		_iceCaveRoom_lightThread();
	}
}

// Room exit function
function iceCaveRoom_exit()
{
	// Delete lights
	Light_delete(_iceCaveEntranceOmniLight);
	Light_delete(_iceCaveAmbientLight);
	Light_delete(_iceCaveLightningLight);

	// Remove areas
	Light_removeArea(_iceCaveDarkArea);
	Light_removeArea(_iceCaveRingObjectArea);
	Light_removeArea(_iceCaveDaggerObjectArea);
	Light_removeArea(_iceCaveindyCostumeArea);
}
