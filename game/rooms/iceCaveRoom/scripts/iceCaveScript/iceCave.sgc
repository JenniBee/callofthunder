thread mousePos()
{
	// TODO: remove this thread as it's only used for debugging purposes
   Interface_printTextLoadDefault();
   while (1)
   {
      Util_redraw();
      Script_break();
      Interface_printTextAt(220, 5);
      Interface_printText("X: %i{VAR_MOUSE_X}");
      Interface_printTextAt(220, 15);
      Interface_printText("Y: %i{VAR_MOUSE_Y}");
      Script_break();
   }
}

function ringObject_verb(var objA, var objB)
{
	action
	{
		case verbPickUp:
			Actor_pickup(ringInvObject);
			Object_setState(objA, OBJECT_STATE_DISABLED);
			break;
		case verbLookAt:
			Actor_talkEgo("Hmm, that's probably a ring.");
			Script_waitForMessage();
			asm { pushWordVar .word objA setObjectName .string "ring?" }
			break;
	}
}

function entranceObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			Actor_talkEgo("That's way too high to climb.");
			break;
		case verbTalkTo:
			Actor_talkEgo("In the final demo, we will start a dialog.");
			break;
	}
}

function iceObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Room_load(iceCaveMechanismRoom);
			break;
	}
}

function wallObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			//Actor_animate(actorIndy, );
			Actor_printEgo("It feels loose somehow.");
			break;
	}
}

thread changeIntensity()
{
	const MIN_INTENSITY = 10;
    const MAX_INTENSITY = 45;
	const DELAY = 6;
    var i;

	// Gradually makes the room and its objects brighter
    for (i = MIN_INTENSITY; i < MAX_INTENSITY; i++)
    {
		Room_setIntensity(i, darkArea_start, darkArea_end);
		Room_setIntensity(i, indyCostumeArea_start, indyCostumeArea_end);
		Room_setIntensity(i, ringObjectArea_start, ringObjectArea_end);
        Script_delay(DELAY);
    }
}

function setupObjects()
{
	// Set objects classes
	Object_setClass(entranceObject, classPerson, 1);
}

function entry()
{
	const START_X = 96;
	const START_Y = 48;

	// Change room insensity slowly as soon as we enter the room
	changeIntensity();
	
	// Set Indy as the default actor
	VAR_EGO = actorIndy;

	// Setup local objects
	setupObjects();

	// Position Indy
	Actor_putAtXY(actorIndy, START_X, START_Y, VAR_ROOM);
	Actor_setDirection(ACTOR_DIR_SOUTH);

	// Give default items to Indy
	Actor_pickup(whipInvObject);
	Actor_pickup(matchesInvObject);

	// Set inventory touch mode and enable inventory and input
	Inventory_setTouchVerb(1);
	Inventory_enable();
	Input_enable();
	
	// TODO: Fall down and stand up animation *OUCH*
	// Actor from surface: "Everything's alright Indy?"
	Actor_talkEgo("It's ok.");
	Script_waitForMessage();
	// Small dialog -> torch falls down

	// Show mouse coordinates
	mousePos();
}

function exit()
{
}
