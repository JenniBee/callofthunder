// Global constants
const CREDITS_FADE_DELAY = 3;
const OMNI_INTENSITY1 = 255;
const OMNI_INTENSITY2 = 10;
const OMNI_POS_X = 100;
const OMNI_POS_Y = 40;
const OMNI_RANGE = 25;
const AMBIENT_MIN_INTENSITY = 50;
const AMBIENT_MEDIUM_INTENSITY = 65;
const AMBIENT_MAX_INTENSITY = 255;
const AMBIENT_INTENSITY_STEP = 30;
const LIGHTNING_MIN_INTENSITY = 0;
const LIGHTNING_MAX_INTENSITY = 300;
const LIGHTNING_RANDOM = 200;

// Global variables
var iceCaveEntrance;
var actorLogo;
var _creditsColor1;
var _creditsColor2;
var _iceCaveEntranceOmniLight;
var _iceCaveAmbientLight;
var _iceCaveLightningLight;
var _iceCaveDarkArea;
var _iceCaveObjRingArea;
var _iceCaveObjDaggerArea;
var _iceCaveCostIndyArea;
var _iceCaveAmbientLightIntensity;
var _iceCaveEntranceOmniLightIntensity;
var _dialogHarald;

// Enumerations
enum { ICE_CAVE_HOLE_ENTRANCE, ICE_CAVE_MECHANISM_ENTRANCE };
enum { HARALD_TOPIC_ROOT, N_HARALD_TOPICS };
enum { HARALD_LINE_TORCH, HARALD_LINE_GET_OUT, HARALD_LINE_LEAVE };

// Object action functions
function objDagger_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			if (Object_getOwner(invLitTorch1) != VAR_EGO)
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_animate(actorIndy, costIndy_pickUpLow);
					Script_delay(PICK_UP_DELAY);
					Actor_talkEgo("OUCH!");
					Script_waitForMessage();
					Actor_talkEgo("It feels sharp!");
					asm { pushWordVar .word objA setObjectName .string "knife?" }
				}
			else
				Actor_talkEgo("That looks like a pretty sharp dagger.");
			break;
		case verbPickUp:
			cutscene (CUTSCENE_TYPE_A)
			{
				Actor_animate(actorIndy, costIndy_pickUpLow);
				Script_delay(PICK_UP_DELAY);
				Object_setState(objA, OBJECT_STATE_DISABLED);
				Actor_pickup(invDagger);
				Actor_animate(actorIndy, costIndy_stand);
			}
			break;
	}
}

function objEntrance_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			Actor_talkEgo("That's way too high to climb.");
			break;
		case verbTalkTo:
			// Talk to Harald
			cutscene (CUTSCENE_TYPE_B)
			{
				Actor_talkEgo("Harald?");
				Script_waitForMessage();
				Actor_talk(actorHarald, "Yes?");
				Script_waitForMessage();
			}
			Dialog_setTopic(_dialogHarald, HARALD_TOPIC_ROOT);
			Dialog_show();
			break;
	}
}

function objIce_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			if (Object_getOwner(invLitTorch1) != VAR_EGO)
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_animate(actorIndy, costIndy_pickUpMedium);
					Script_delay(PICK_UP_DELAY);
					Actor_talkEgo("Brrr... it's cold.");
				}
			else if (Object_getOwner(invRuneStone) != VAR_EGO)
			{
				Room_fade(ROOM_FADE_DISSOLVE_EFFECT_1, ROOM_FADE_DISSOLVE_EFFECT_1);
				Room_load(roomIceCaveMechanism);
			}
			else
				Actor_talkEgo("I already found what I needed.");
			break;
	}
}

function objRing_verb(var objA, var objB)
{
	action
	{
		case verbPickUp:
			cutscene (CUTSCENE_TYPE_A)
			{
				Actor_animate(actorIndy, costIndy_pickUpLow);
				Script_delay(PICK_UP_DELAY);
				Object_setState(objA, OBJECT_STATE_DISABLED);
				Actor_pickup(invRing);
				Actor_animate(actorIndy, costIndy_stand);
			}
			break;
		case verbLookAt:
			if (Object_getOwner(invLitTorch1) != VAR_EGO)
			{
				Actor_animate(actorIndy, costIndy_pickUpLow);
				Script_delay(PICK_UP_DELAY);
				Actor_talkEgo("Hmm, that's probably a ring.");
				asm { pushWordVar .word objA setObjectName .string "ring?" }
			}
			else
				Actor_talkEgo("Nice ring.");
			break;
	}
}

function objSkeleton_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("Poor guy. I wonder how long he's been lying here.");
			break;
		case verbPickUp:
			if (Object_getOwner(invBone) == VAR_EGO)
				Actor_talkEgo("I already found what I needed.");
			else
				cutscene (CUTSCENE_TYPE_A)
				{
					Actor_talkEgo("Hmmm, I guess this bone could come in handy.");
					Script_waitForMessage();
					Actor_animate(actorIndy, costIndy_pickUpLow);
					Script_delay(PICK_UP_DELAY);
					Actor_pickup(invBone);
					Actor_animate(actorIndy, costIndy_stand);
				}
			break;
	}
}

function objWall_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			if (Object_getOwner(invLitTorch1) != VAR_EGO)
					cutscene (CUTSCENE_TYPE_A)
					{
						Actor_animate(actorIndy, costIndy_pickUpMedium);
						Script_delay(PICK_UP_DELAY);
						Actor_talkEgo("It feels loose somehow.");
					}
			else
				Actor_talkEgo("It's loose.");
			break;
	}
}

// Private functions
function _roomIceCave_checkMechanism()
{
	const ACTOR_X = 160;
	const ACTOR_Y = 135;

	// Check for success
	if (iceCaveMechanism_solved)
	{
		cutscene (CUTSCENE_TYPE_A)
		{
			// TODO: Trigger mechanism

			// Shake for a while
			Room_setShaking(1);
			Actor_talkEgo("Wow...");
			Script_waitForMessage();
			Room_setShaking(0);

			// Pick up rune stone
			Actor_pickup(invRuneStone);

			Actor_talkEgo("There we go... it's a rune stone !");
			Script_waitForMessage();
			Actor_talkEgo("I'm a bit rusty, but let's try to find out what it says...");
			Script_waitForMessage();

			// Walk to the foreground
			Actor_walkToXY(VAR_EGO, ACTOR_X, ACTOR_Y);
			Script_waitForActor(VAR_EGO);

			// Display upcoming game info
			Actor_talkEgo("Be ready to experience The Call of Thunder, an upcoming and authentic old-school game...");
			Script_waitForMessage();
			Actor_talkEgo("We're looking for MIDI music and sprite artists, so don't be shy and join us if you're up for the challenge!");
			Script_waitForMessage();

			// Add dialog line
			Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_GET_OUT, "Help me get out of here!");
		}
	}
	else
	{
		Actor_talkEgo("Nothing happened.");
		Script_waitForMessage();
	}
}

inline function _roomIceCave_displayCredits()
{
	const CREDITS_LOW_INTENSITY = 55;
	const CREDITS_HIGH_INTENSITY = 255;
	const CREDITS_INTENSITY_STEP_UP = 40;
	const CREDITS_INTENSITY_STEP_DOWN = 50;

	// Set credits color
	_creditsColor1 = COLOR_PINK_FLAMINGO;
	_creditsColor2 = COLOR_AQUAMARINE;

	// Set charset and text speed
	Interface_setCharset(font3);
	VAR_CHARINC = 3;

	// Story and design
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor1, _creditsColor1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamFunction("story and design by:");
	_roomIceCave_displayTeamMember("DOMINIK HASLINGER");
	_roomIceCave_fadeCredits(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeTeamMember(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamMember("JENS DOBLIES");
	_roomIceCave_fadeTeamMember(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeTeamMember(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamMember("SEBASTIEN RONSSE");
	_roomIceCave_fadeTeamMember(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeCredits(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	Util_redraw();
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);

	// Programming
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor1, _creditsColor1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamFunction("programmed by:");
	_roomIceCave_displayTeamMember("SEBASTIEN RONSSE");
	_roomIceCave_fadeCredits(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeTeamMember(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamMember("DOMINIK HASLINGER");
	_roomIceCave_fadeTeamMember(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeCredits(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	Util_redraw();
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);
	
	// Background art
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor1, _creditsColor1);
	Room_setIntensity(CREDITS_LOW_INTENSITY, _creditsColor2, _creditsColor2);
	_roomIceCave_displayTeamFunction("background art by:");
	_roomIceCave_displayTeamMember("JENS DOBLIES");
	_roomIceCave_fadeCredits(CREDITS_LOW_INTENSITY, CREDITS_HIGH_INTENSITY, CREDITS_INTENSITY_STEP_UP);
	Script_delaySeconds(2);
	_roomIceCave_fadeCredits(CREDITS_HIGH_INTENSITY, CREDITS_LOW_INTENSITY, -CREDITS_INTENSITY_STEP_DOWN);
	Util_redraw();
	_roomIceCave_displayTeamMember("");
	Script_delaySeconds(1);
}

inline function _roomIceCave_displayIJLogo()
{
	const SCALE_FACTOR = 20;
	const LOGO_X = 161;
	const LOGO_Y = 57;

	var i;
	var scale;

	// Create and setup logo actor
	actorLogo = actorTemp;
	Actor_setCurrent(actorLogo);
	Actor_setCostume(costLogo);
	Actor_setInitAnim(costLogo_animLogo);
	Actor_ignoreBoxes(1);
	Actor_putAtXY(actorLogo, LOGO_X, LOGO_Y, VAR_ROOM);

	// Scale Indiana Jones logo gradually
	scale = 0;
	i = 0;
	while (scale < 255)
	{
		Actor_setScale(scale);
		scale += 1 + SCALE_FACTOR * i / 256;
		Script_break();
		i++;
	}
	Actor_setScale(255);

	// Wait, and then display game title
	Script_delaySeconds(1);
	Object_draw(objTitle, 1);
}

inline function _roomIceCave_displayTeamFunction(var string)
{
	const TEAM_FUNCTION_X = 160;
	const TEAM_FUNCTION_Y = 117;
	Interface_printTextLoadDefault();
	Interface_printTextColor(_creditsColor1);
	Interface_printTextAt(TEAM_FUNCTION_X, TEAM_FUNCTION_Y);
	Interface_printTextCenter();
	Interface_printTextSaveDefault();
	Interface_printText("%s{string}");
}

inline function _roomIceCave_displayTeamMember(var string)
{
	const TEAM_MEMBER_X = 160;
	const TEAM_MEMBER_Y = 132;
	Interface_printLineLoadDefault();
	Interface_printLineColor(_creditsColor2);
	Interface_printLineAt(TEAM_MEMBER_X, TEAM_MEMBER_Y);
	Interface_printLineCenter();
	Interface_printLineSaveDefault();
	// We add spaces to force the credits to be printed longer
	Interface_printLine("           %s{string}           ");
}

inline function _roomIceCave_fadeCredits(var start, var end, var step)
{
	var i;
	for (i = start; i != end; i += step)
	{
		Room_setIntensity(i, _creditsColor1, _creditsColor1);
		Room_setIntensity(i, _creditsColor2, _creditsColor2);
		Script_delay(CREDITS_FADE_DELAY);
	}
	Room_setIntensity(end, _creditsColor1, _creditsColor1);
	Room_setIntensity(end, _creditsColor2, _creditsColor2);
}

inline function _roomIceCave_fadeTeamMember(var start, var end, var step)
{
	var i;
	for (i = start; i != end; i += step)
	{
		Room_setIntensity(i, _creditsColor2, _creditsColor2);
		Script_delay(CREDITS_FADE_DELAY);
	}
	Room_setIntensity(end, _creditsColor2, _creditsColor2);
}

function _roomIceCave_haraldTopicRoot(var line)
{
	switch (line)
	{
		case HARALD_LINE_TORCH:
			// Get torch
			Actor_talk(actorHarald, "Alright, here it is!");
			Script_waitForMessage();
			Actor_pickup(invUnlitTorch);
			Actor_talkEgo("Thanks!");
			Script_waitForMessage();
			Dialog_removeLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_TORCH);
			break;
		case HARALD_LINE_GET_OUT:
			Actor_talk(actorHarald, "OK!");
			Script_waitForMessage();
			Util_quit();
			break;
		case HARALD_LINE_LEAVE:
			Actor_talk(actorHarald, "I'll be here...");
			Script_waitForMessage();
			Dialog_hide();
			Actor_turnToDirection(ACTOR_DIR_SOUTH);
			break;
	}
}

function _roomIceCave_intro()
{
	var previousVarTimerNext;

	// Save and modify VAR_TIMER_NEXT value
	previousVarTimerNext = VAR_TIMER_NEXT;
	VAR_TIMER_NEXT = 1;

	// Wait and display Indiana Jones logo
	try
	{
		Script_delaySeconds(1);
		_roomIceCave_displayIJLogo();

		// Wait and display credits
		Script_delaySeconds(2);
		_roomIceCave_displayCredits();
	}

	// Redraw screen in case some text is still displayed
	Util_redraw();

	// Hide logo and title
	Actor_hide(actorLogo);
	Object_setState(objTitle, OBJECT_STATE_DISABLED);

	// Restore previous VAR_TIMER_NEXT value
	VAR_TIMER_NEXT = previousVarTimerNext;
}

thread _roomIceCave_lightThread()
{
	var i;
	var torchLit;
	var ambientLightIntensity;

	// Initialize ambient light intensity
	ambientLightIntensity = AMBIENT_MIN_INTENSITY;

	// Initialize torch state
	torchLit = (Object_getOwner(invLitTorch1) == VAR_EGO);

	// Loop and change intensity of the room
	while (1)
	{
		// Increase the room intensity
		if (ambientLightIntensity < AMBIENT_MEDIUM_INTENSITY)
		{
			Light_setColor(_iceCaveAmbientLight, ambientLightIntensity, ambientLightIntensity, ambientLightIntensity);
			ambientLightIntensity++;
		}

		// Thunder strike
		Light_setColor(_iceCaveLightningLight, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY);
		if (Util_getRandomNumber(LIGHTNING_RANDOM) == 0)
		{
			Light_setColor(_iceCaveLightningLight, LIGHTNING_MAX_INTENSITY, LIGHTNING_MAX_INTENSITY, LIGHTNING_MAX_INTENSITY);
			Util_printDebug("%V{vocThunderstrike}");
			if (!torchLit)
				ambientLightIntensity = AMBIENT_MIN_INTENSITY;
		}

		// Check if we just got the torch
		if (!torchLit && (Object_getOwner(invLitTorch1) == VAR_EGO))
		{
			// Brighten the ice cave room completely
			for (i = AMBIENT_MEDIUM_INTENSITY; i < AMBIENT_MAX_INTENSITY; i += AMBIENT_INTENSITY_STEP)
			{
				ambientLightIntensity = i;
				Light_setColor(_iceCaveAmbientLight, ambientLightIntensity, ambientLightIntensity, ambientLightIntensity);
				Script_break();
			}

			// Change omni light intensity
			Light_setColor(_iceCaveEntranceOmniLight, OMNI_INTENSITY2, OMNI_INTENSITY2, OMNI_INTENSITY2);

			// Change room object names
			asm { pushWord .word objDagger setObjectName .string "dagger" }
			asm { pushWord .word objRing setObjectName .string "ring" }

			// Disable inventory touch mode
			Inventory_setTouchVerb(0);
			Inventory_show();
	
			Actor_talkEgo("And then there was light...");

			// Set torch state
			torchLit = 1;
		}

		Script_break();
	}
}

inline function _roomIceCave_setupLights()
{
	// Add omni light
	_iceCaveEntranceOmniLight = Light_new(LIGHT_TYPE_OMNI);
	Light_setColor(_iceCaveEntranceOmniLight, OMNI_INTENSITY1, OMNI_INTENSITY1, OMNI_INTENSITY1);
	Light_setPos(_iceCaveEntranceOmniLight, OMNI_POS_X, OMNI_POS_Y);
	Light_setRange(_iceCaveEntranceOmniLight, OMNI_RANGE);

	// Add ambient light
	_iceCaveAmbientLight = Light_new(LIGHT_TYPE_AMBIENT);
	Light_setColor(_iceCaveAmbientLight, AMBIENT_MIN_INTENSITY, AMBIENT_MIN_INTENSITY, AMBIENT_MIN_INTENSITY);

	// Add lightning light
	_iceCaveLightningLight = Light_new(LIGHT_TYPE_AMBIENT);
	Light_setColor(_iceCaveLightningLight, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY, LIGHTNING_MIN_INTENSITY);

	// Add areas
	_iceCaveDarkArea = Light_addArea(0, darkArea_start, darkArea_end);
	_iceCaveObjRingArea = Light_addArea(0, objRingArea_start, objRingArea_end);
	_iceCaveObjDaggerArea = Light_addArea(0, objDaggerArea_start, objDaggerArea_end);
	_iceCaveCostIndyArea = Light_addArea(actorIndy, costIndyArea_start, costIndyArea_end);
}

// Public functions
inline function roomIceCave_init()
{
	// Setup entrance
	Object_setClass(objEntrance, classPerson, 1);
	Object_setState(objEntrance, OBJECT_STATE_PICKABLE);
	Object_setOwner(objEntrance, OBJECT_OWNER_ROOM);

	// Setup wall
	Object_setState(objWall, OBJECT_STATE_PICKABLE);
	Object_setOwner(objWall, OBJECT_OWNER_ROOM);

	// Setup ring
	Object_setState(objRing, OBJECT_STATE_PICKABLE);
	Object_setOwner(objRing, OBJECT_OWNER_ROOM);

	// Setup icy wall
	Object_setState(objIce, OBJECT_STATE_PICKABLE);
	Object_setOwner(objIce, OBJECT_OWNER_ROOM);
	
	// Setup skeleton
	Object_setState(objSkeleton, OBJECT_STATE_PICKABLE);
	Object_setOwner(objSkeleton, OBJECT_OWNER_ROOM);
	
	// Setup dagger
	Object_setState(objDagger, OBJECT_STATE_PICKABLE);
	Object_setOwner(objDagger, OBJECT_OWNER_ROOM);

	// Create dialog
	_dialogHarald = Dialog_new(N_HARALD_TOPICS);
	Dialog_addTopic(_dialogHarald, HARALD_TOPIC_ROOT, _roomIceCave_haraldTopicRoot);
	Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_TORCH, "Throw me the torch!");
	Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_LEAVE, "I'll talk to you later.");
}

// Room entry function
function roomIceCave_entry()
{
	const START_X = 96;
	const START_Y = 48;
	const CLUE_X = 100;
	const CLUE_Y = 100;
	const HARALD_X = 10;
	const HARALD_Y = 5;

	switch (iceCaveEntrance)
	{
		case  ICE_CAVE_HOLE_ENTRANCE:
			// Setup lights first
			_roomIceCave_setupLights();

			// Display credits first
			_roomIceCave_intro();

			// Position Indy
			Actor_setCurrent(VAR_EGO);
			Actor_putAtXY(VAR_EGO, START_X, START_Y, VAR_ROOM);
			Actor_setDirection(ACTOR_DIR_NORTH);

			// Position Harald
			Actor_putAtXY(actorHarald, HARALD_X, HARALD_Y, VAR_ROOM);

			// Give default items to Indy
			Actor_pickup(invWhip);
			Actor_pickup(invMatches);

			// Set inventory touch mode and enable inventory and input
			Inventory_setTouchVerb(1);

			// Set default charset and print settings
			Interface_setCharset(font2);
			Actor_printLoadDefault(actorIndy);
			Actor_printCenter();
			Actor_printOverhead();
			Actor_printSaveDefault();

			// TODO: Fall down and stand up animation *OUCH*

			// Harald and Indy initial dialog
			Actor_talk(actorHarald, "Everything alright down there?");
			Script_waitForMessage();
			Actor_talkEgo("I guess so, thanks!");
			Script_waitForMessage();

			// Clue
			Actor_walkToXY(VAR_EGO, CLUE_X, CLUE_Y);
			Script_waitForActor(VAR_EGO);
			Actor_talkEgo("Alright, Jones...");
			Script_waitForMessage();
			Actor_talkEgo("How are you gonna find that ARTIFACT in such a DARK place?");
			Script_waitForMessage();

			// Launch lightning thread
			_roomIceCave_lightThread();
			break;

		case ICE_CAVE_MECHANISM_ENTRANCE:
			// Set Indy's direction
			Actor_setDirection(ACTOR_DIR_EAST);

			// Check mechanism
			_roomIceCave_checkMechanism();
			break;
	}

	// Enable sentence and inventory
	Sentence_enable();
	Inventory_enable();
	Sentence_show();
	Inventory_show();
	Input_enable();
}

// Room exit function
function roomIceCave_exit()
{
	// Delete lights
	Light_delete(_iceCaveEntranceOmniLight);
	Light_delete(_iceCaveAmbientLight);
	Light_delete(_iceCaveLightningLight);

	// Remove areas
	Light_removeArea(_iceCaveDarkArea);
	Light_removeArea(_iceCaveObjRingArea);
	Light_removeArea(_iceCaveObjDaggerArea);
	Light_removeArea(_iceCaveCostIndyArea);
}
