// Sentence verbs
verb verbGive;
verb verbPickUp;
verb verbUse;
verb verbOpen;
verb verbTalkTo;
verb verbPush;
verb verbClose;
verb verbLookAt;
verb verbPull;
verb verbWalk;

// Enums
enum { PREPO_ON, PREPO_TO, PREPO_WITH, PREPO_NONE };
enum { OBJ_OBJECT, OBJ_ACTOR, OBJ_INVENTORY, OBJ_NONE };

// Sentence line verb
verb verbSentenceLine;

// Global constants
const FROZEN_INTENSITY = 255;
const UNFROZEN_INTENSITY = 175;

// Private variables
var _sentenceEnabled;
var _object;
var _objectType;
var _sentenceVerb;
var _selectedVerb;
var _sentenceObjA;
var _selectedObjA;
var _sentenceObjB;
var _selectedObjB;
var _sentencePrepo;
var _alternateVerb;
var _sentenceFrozen;
var _defaultPickUpString;
var _defaultUseString;
var _defaultOpenString;
var _defaultPushPullString;
var _defaultCloseString;
var _defaultLookAtString;
var _prepoOnString;
var _prepoToString;
var _prepoWithString;
var _verbUnderMouse;

// Object classes
class classPerson;
class classOpenable;
class classUsable;

// Private functions
inline function _Sentence_getObject()
{
	// Object check
	_object = Object_find(VAR_VIRT_MOUSE_X, VAR_VIRT_MOUSE_Y);
	if ((_object != 0) && (Object_getState(_object) != OBJECT_STATE_DISABLED))
	{
		_objectType = OBJ_OBJECT;
		return;
	}

	// Actor check
	_object = Actor_getFromXY(VAR_VIRT_MOUSE_X, VAR_VIRT_MOUSE_Y);
	if (_object != 0)
	{
		_objectType = OBJ_ACTOR;
		return;
	}

	// Inventory object check
	_object = Inventory_getObject(VAR_MOUSE_X, VAR_MOUSE_Y);
	if (_object != 0)
	{
		_objectType = OBJ_INVENTORY;
		return;
	}

	// Nothing found
	_objectType = OBJ_NONE;
}

function _Sentence_handler(var vrb, var objA, var objB)
{
	var entryPt;

	// Freeze sentence
	_sentenceFrozen = 1;

	// Set charset used for actors
	Interface_setCharset(font2);

	// Wait for current actor to be done walking
	Script_waitForActor(VAR_EGO);

	// Get verb entry point
	entryPt = Verb_getEntryPoint(objA, vrb);
	if (entryPt != 0)
	{
		// Call appropriate object script
		Script_stopObjectScript(objA);
		Script_startObjectScriptQuick(objA, vrb, [objA, objB], 2);
	}
	else // Default verb actions
		switch (vrb)
		{
			case verbPickUp:
				Actor_talkEgo(_defaultPickUpString);
				break;
			case verbUse:
				Actor_talkEgo(_defaultUseString);
				break;
			case verbOpen:
				Actor_talkEgo(_defaultOpenString);
				break;
			case verbPush:
			case verbPull:
				Actor_talkEgo(_defaultPushPullString);
				break;
			case verbClose:
				Actor_talkEgo(_defaultCloseString);
				break;
			case verbLookAt:
				Actor_talkEgo(_defaultLookAtString);
				break;
		}

	// If sentence is complete, change verb back to the default Walk verb,
	// otherwise make sure to unfreeze the sentence
	if (_Sentence_isComplete())
		_Sentence_reset(verbWalk);
	else
		_sentenceFrozen = 0;
}

inline function _Sentence_handleSpecialCases()
{
	// 1. If _object is an actor and it's VAR_EGO, discard it
	if ((_objectType == OBJ_ACTOR) && (_object == VAR_EGO))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 2. If sentence is frozen, if current verb is walk, and if _object is different than the first selected element,
	// then reset the sentence
	if (_sentenceFrozen && (_sentenceVerb == verbWalk) && (_object != _selectedObjA))
		_Sentence_reset(verbWalk);

	// 3. If the current verb is Talk To and _object is not an actor, then discard it
	if ((_sentenceVerb == verbTalkTo) && (_objectType != OBJ_ACTOR) && !Object_isClassOf(_object, classPerson))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 4. If the current verb is Give and the first object has not been selected,
	// then make sure the first object is not an actor, otherwise discard it
	if ((_sentenceVerb == verbGive) && (_selectedObjA == 0) && (_objectType == OBJ_ACTOR))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 5. If the current verb is Give and the first object of the sentence is selected already,
	// then make sure the second object is an actor, otherwise discard it
	if ((_sentenceVerb == verbGive) && (_selectedObjA != 0) && (_objectType != OBJ_ACTOR))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 6. If the current verb is Walk and _object is either an object or an actor,
	// then change the verb name to "Walk to", otherwise, reset it to "Walk"
	if ((_sentenceVerb == verbWalk) && ((_objectType == OBJ_OBJECT) || (_objectType == OBJ_ACTOR)))
	{
		Verb_setCurrent(verbWalk);
		Verb_setNameString("Walk to");
	}
	else
	{
		Verb_setCurrent(verbWalk);
		Verb_setNameString("Walk");
	}

	// 7. If the current verb is not Walk, if the sentence first element has been selected and is the same as _object,
	// and if the sentence is not frozen, then discard _object
	if ((_selectedObjA != 0) && (_object == _selectedObjA) && !_sentenceFrozen)
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 8. If the current verb is Walk, if _object is an inventory object, and sentence is not frozen,
	// then change the sentence verb to Look At
	if ((_sentenceVerb == verbWalk) && (_objectType == OBJ_INVENTORY) && !_sentenceFrozen)
		_sentenceVerb = verbLookAt;

	// 9. If the current verb is Give, then set the preposition to "to" if the first object
	// of the sentence is selected, otherwise clear the preposition
	if (_sentenceVerb == verbGive)
		if (_selectedObjA != 0)
			Sentence_setPrepo(PREPO_TO);
		else
			Sentence_setPrepo(PREPO_NONE);
}

inline function _Sentence_isComplete()
{
	// Depending on which verb is active and which element has been selected,
	// we can tell if the sentence if complete or not
	switch (_selectedVerb)
	{
		case verbGive:
			return (_selectedObjB != 0);
		case verbPickUp:
			return (_selectedObjA != 0);
		case verbUse:
			return (((_selectedObjA != 0) && (_sentencePrepo == 0)) || (_selectedObjB != 0));
		case verbOpen:
			return (_selectedObjA != 0);
		case verbTalkTo:
			return (_selectedObjA != 0);
		case verbPush:
			return (_selectedObjA != 0);
		case verbClose:
			return (_selectedObjA != 0);
		case verbLookAt:
			return (_selectedObjA != 0);
		case verbPull:
			return (_selectedObjA != 0);
		case verbWalk:
			return (_selectedObjA != 0);
	}
}

inline function _Sentence_reset(var vrb)
{
	// Set sentence elements
	_sentenceVerb = vrb;
	_selectedVerb = vrb;
	_sentenceObjA = _object;
	_selectedObjA = 0;
	_sentenceObjB = 0;
	_selectedObjB = 0;
	Sentence_setPrepo(PREPO_NONE);

	// Unfreeze sentence
	_sentenceFrozen = 0;
}

inline function _Sentence_roomClick()
{
	const ACTOR_DIST = 40;

	// Stop actor
	Actor_stopMoving();
	Actor_stopTalking();

	// Object click
	if (_objectType != OBJ_NONE)
	{
		// Walk to object
		Actor_walkToObject(VAR_EGO, _object, ACTOR_DIST);
		return;
	}

	// Set the sentence verb to Walk if it is not set already
	if (_sentenceVerb != verbWalk)
		_Sentence_reset(verbWalk);

	// Walk to mouse pointer location
	Actor_walkToXY(VAR_EGO, mouseX, mouseY);
}

inline function _Sentence_setAlternateVerb(var vrb)
{
	if (vrb != _alternateVerb)
	{
		// Reset current alternate verb color
		if (_alternateVerb != 0)
		{
			Verb_setCurrent(_alternateVerb);
			Verb_setColor(areaNormal_start);
			Verb_draw();
		}

		// Change alternate verb
		_alternateVerb = vrb;

		// Set color if needed
		if (_alternateVerb != 0)
		{
			Verb_setCurrent(_alternateVerb);
			Verb_setColor(areaHi_start);
			Verb_draw();
		}
	}
}

inline function _Sentence_select()
{
	// Select elements previously detected
	_selectedObjA = _sentenceObjA;
	_selectedObjB = _sentenceObjB;
}

inline function _Sentence_update()
{
	// Don't update sentence if sentence is frozen
	if (_sentenceFrozen)
		return;

	// Update sentence elements
	if (_selectedObjA == 0)
	{
		_sentenceObjB = 0;
		_sentenceObjA = _object;
	}
	else
		_sentenceObjB = _object;
}

inline function _Sentence_updateAlternateVerb()
{
	switch (_objectType)
	{
		case OBJ_OBJECT:
			// Check for the object class and set the alternate verb accordingly
			if (Object_isClassOf(_object, classPerson))
				_Sentence_setAlternateVerb(verbTalkTo);
			else if (Object_isClassOf(_object, classOpenable))
				_Sentence_setAlternateVerb(verbOpen);
			else if (Object_isClassOf(_object, classUsable))
				_Sentence_setAlternateVerb(verbUse);
			else
				_Sentence_setAlternateVerb(verbLookAt);
			break;
		case OBJ_ACTOR:
			_Sentence_setAlternateVerb(verbTalkTo);
			break;
		case OBJ_INVENTORY:
			_Sentence_setAlternateVerb(verbLookAt);
			break;
		case OBJ_NONE:
			_Sentence_setAlternateVerb(0);
			break;
	}
}

inline function _Sentence_updateVerbUnderMouse()
{
	const VERBS_ZONE_START_X = 3;
	const VERBS_ZONE_START_Y = 156;
	const VERBS_ZONE_WIDTH = 46;
	const VERBS_ZONE_HEIGHT = 14;
	const VERBS_N_COLUMNS = 3;
	const VERBS_N_LINES = 3;
	var vrb;

	// Get verb under mouse
	vrb = Verb_getFromXY(VAR_MOUSE_X, VAR_MOUSE_Y);

	// Get inventory verb from mouse location
	if (vrb != verbVerbs)
		vrb = 0;
	else if ((VAR_MOUSE_X < VERBS_ZONE_START_X) || (VAR_MOUSE_X >= VERBS_ZONE_START_X + VERBS_N_COLUMNS * VERBS_ZONE_WIDTH))
		vrb = 0;
	else if ((VAR_MOUSE_Y < VERBS_ZONE_START_Y) || (VAR_MOUSE_Y >= VERBS_ZONE_START_Y + VERBS_N_LINES * VERBS_ZONE_HEIGHT))
		vrb = 0;
	else
		vrb = verbGive + ((VAR_MOUSE_X - VERBS_ZONE_START_X) / VERBS_ZONE_WIDTH) + ((VAR_MOUSE_Y - VERBS_ZONE_START_Y) / VERBS_ZONE_HEIGHT) * VERBS_N_COLUMNS;

	// Update verb color
	if (vrb != _verbUnderMouse)
	{
		// Reset current verb color
		if (_verbUnderMouse != 0)
		{
			Verb_setCurrent(_verbUnderMouse);
			Verb_setColor(areaNormal_start);
			Verb_draw();
		}

		// Select verb under mouse
		_verbUnderMouse = vrb;

		// Set color if needed
		if (_verbUnderMouse != 0)
		{
			Verb_setCurrent(_verbUnderMouse);
			Verb_setColor(areaHi_start);
			Verb_draw();
		}
	}
}

inline function _Sentence_verbClick(var vrb)
{
	// Inventory object click
	if (_objectType == OBJ_INVENTORY)
	{
		// Stop actor
		Actor_stopMoving();
		Actor_stopTalking();
		return 0;
	}

	// Sentence verb click
	if (Util_isAnyOf(vrb, [verbGive, verbPickUp, verbUse, verbOpen, verbTalkTo, verbPush, verbClose, verbLookAt, verbPull], 9))
		_Sentence_reset(vrb);
	else if (_verbUnderMouse != 0)
		_Sentence_reset(_verbUnderMouse);
	
	return 1;
}

// Public functions
inline function Sentence_click()
{
	// Check if sentence if enabled first
	if (!_sentenceEnabled)
		return;

	// Stop any running sentence
	Verb_stopSentence();

	// On a right click, change current verb to the alternate verb
	// (only applies when objB has not been selected)
	if ((inputBtn == MOUSE_BUTTON_2) && (_alternateVerb != 0) && (_selectedObjB == 0))
	{
		_sentenceVerb = _alternateVerb;
		_selectedVerb = _alternateVerb;
	}

	// Treat each area separately
	switch (inputArea)
	{
		case AREA_VERB:
			if (_Sentence_verbClick(inputCmd))
				return;
			break;
		case AREA_ROOM:
			_Sentence_roomClick();
			break;
	}

	// Select elements of the sentence
	_Sentence_select();

	// Launch the verb sentence
	Verb_doSentence(_sentenceVerb, _selectedObjA, _selectedObjB);
}

inline function Sentence_disable()
{
	// Sentence is now disabled
	_sentenceEnabled = 0;
}

inline function Sentence_enable()
{
	// Sentence is now enabled
	_sentenceEnabled = 1;
}

inline function Sentence_hide()
{
	// If sentence is disabled, return
	if (!_sentenceEnabled)
		return;

	// Hide sentence line verb
	Verb_setCurrent(verbSentenceLine);
	Verb_activate(0);
	Verb_draw();
}

function Sentence_init()
{
	const VERB_SENTENCE_LINE_X = 160;
	const VERB_SENTENCE_LINE_Y = 144;

	// Create default verb
	Verb_setCurrent(verbWalk);
	Verb_new();
	Verb_setNameString("Walk");

	// Initialize sentence elements
	_sentenceVerb = verbWalk;
	_selectedVerb = verbWalk;
	_sentenceObjA = 0;
	_selectedObjA = 0;
	_sentenceObjB = 0;
	_selectedObjB = 0;
	Sentence_setPrepo(PREPO_NONE);

	// Add sentence line verb
	Verb_setCurrent(verbSentenceLine);
	Verb_new();
	Verb_setNameString("%v{_sentenceVerb} %n{_sentenceObjA} %s{_sentencePrepo} %n{_sentenceObjB}");
	Verb_center();
	Verb_setColor(COLOR_AQUAMARINE);
	Verb_setBackColor(COLOR_BLACK);
	Verb_setDimColor(COLOR_AQUAMARINE);
	Verb_setHiColor(COLOR_AQUAMARINE);
	Verb_setPos(VERB_SENTENCE_LINE_X, VERB_SENTENCE_LINE_Y);
	_sentenceFrozen = 0;
	
	// Default action strings
	_defaultPickUpString = "I can't pick that up.";
	_defaultUseString = "I don't think that will work.";
	_defaultOpenString = "It doesn't seem to open.";
	_defaultPushPullString = "I can't move it.";
	_defaultCloseString = "It doesn't seem to close.";
	_defaultLookAtString = "I don't see anything special about it.";

	// Preposition strings
	_prepoOnString = "on";
	_prepoToString = "to";
	_prepoWithString = "with";

	// Sentence is disabled by default
	_sentenceEnabled = 0;

	// Tell SCUMM engine which script will be our sentence handler
	VAR_SENTENCE_SCRIPT = _Sentence_handler;
}

inline function Sentence_mouseMove()
{
	// Check if sentence if enabled first
	if (!_sentenceEnabled)
		return;

	// Update verb under mouse
	_Sentence_updateVerbUnderMouse();

	// Get object underneath the mouse
	_Sentence_getObject();

	// Reset sentence verb to the selected one if the sentence is not frozen
	if (!_sentenceFrozen)
		_sentenceVerb = _selectedVerb;

	// Handle special cases first
	_Sentence_handleSpecialCases();

	// Update alternate verb
	_Sentence_updateAlternateVerb();

	// Update sentence elements
	_Sentence_update();

	// Redraw sentence
	Sentence_show();
}

inline function Sentence_setPrepo(var prepo)
{
	// Change preposition
	switch (prepo)
	{
		case PREPO_ON:
			_sentencePrepo = _prepoOnString;
			break;
		case PREPO_TO:
			_sentencePrepo = _prepoToString;
			break;
		case PREPO_WITH:
			_sentencePrepo = _prepoWithString;
			break;
		case PREPO_NONE:
			_sentencePrepo = 0;
	}
}

inline function Sentence_show()
{
	// If sentence is disabled, return
	if (!_sentenceEnabled)
		return;

	// Set sentence intensity
	if (_sentenceFrozen)
		Room_setIntensity(FROZEN_INTENSITY, COLOR_AQUAMARINE, COLOR_AQUAMARINE);
	else
		Room_setIntensity(UNFROZEN_INTENSITY, COLOR_AQUAMARINE, COLOR_AQUAMARINE);

	// Activate sentence verb and draw it
	Verb_setCurrent(verbSentenceLine);
	Verb_activate(1);
	Verb_draw();
}
