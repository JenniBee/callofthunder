// Global variables
var torchIsLit;

function whipInvObject_verb(var objA, var objB)
{
	const MAX_RANDOM_LINES = 2;
	var random;

	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case entranceObject:
					Actor_talkEgo("There is no point in leaving now.");
					break;
				default:
					Actor_talkEgo("Hmmm no.");
					break;
			}
			break;
		case verbLookAt:
			random = Util_getRandomNumber(MAX_RANDOM_LINES);
			switch (random)
			{
				case 0:
					Actor_talkEgo("That's my whip.");
					break;
				case 1:
					Actor_talkEgo("It can be useful in the right spot.");
					break;
				case 2:
					Actor_talkEgo("It's my favorite piece of equipment.");
					break;
			}
			break;
	}
}

function matchesInvObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("I used them to light the torch...");
			Script_waitForMessage();
			Actor_talkEgo("...but unfortunatly they got wet due to the rain outside.");
			break;
	}
}

function ringInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case iceObject:
					Actor_talkEgo("Hmmm... I guess we should implement this soon.");
					break;
				default:
					Actor_talkEgo("I don't want to marry that.");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a nice golden ring.");
			break;
	}
}

function unlitTorchInvObject_verb(var objA, var objB)
{
	const AMBIENT_START_INTENSITY = 55;
    const AMBIENT_END_INTENSITY = 255;
	const AMBIENT_INTENSITY_STEP = 40;

	action
	{
		case verbUse:
			if (!torchIsLit)
			{
				var i;

				// Update torch state
				torchIsLit = 1;

				// Remove ice cave omni light
				Light_delete(iceCaveEntranceOmniLight);

				// Brighten the ice cave room completely
				for (i = AMBIENT_START_INTENSITY; i < AMBIENT_END_INTENSITY; i += AMBIENT_INTENSITY_STEP)
				{
					Light_setColor(iceCaveAmbientLight, i, i, i);
					Script_break();
				}

				// Disable inventory touch mode
				Inventory_setTouchVerb(0);
				Inventory_show();

				Actor_talkEgo("And then there was light...");
				Script_waitForMessage();
			}
			else
			{
				Actor_talkEgo("It's already lit.");
				Script_waitForMessage();
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a regular torch.");
			break;
	}
}

function boneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case tornRopeInvObject:
					Actor_talkEgo("I'll bind it onto the rope.");
					Script_waitForMessage();
					//Actor_pickup
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's the left fibula of the skeleton.");
			break;
	}
}
