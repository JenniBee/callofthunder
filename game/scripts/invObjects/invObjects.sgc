// Global variables
var torchIsLit;

function lightRoom()
{
	const AMBIENT_START_INTENSITY = 55;
    const AMBIENT_END_INTENSITY = 255;
	const AMBIENT_INTENSITY_STEP = 40;
	var i;

	// Update torch state
	torchIsLit = 1;

	// Remove ice cave omni light
	Light_delete(iceCaveEntranceOmniLight);

	// Brighten the ice cave room completely
	for (i = AMBIENT_START_INTENSITY; i < AMBIENT_END_INTENSITY; i += AMBIENT_INTENSITY_STEP)
	{
		Light_setColor(iceCaveAmbientLight, i, i, i);
		Script_break();
	}

	// Change object names
	asm { pushWord .word daggerObject setObjectName .string "dagger" }
	asm { pushWord .word ringObject setObjectName .string "ring" }

	// Disable inventory touch mode
	Inventory_setTouchVerb(0);
	Inventory_show();

	// Change unlit torch to lit torch
	Actor_pickup(litTorchInvObject);
	Object_setOwner(unlitTorchInvObject, 0);
	
	Actor_talkEgo("And then there was light...");
}

function whipInvObject_verb(var objA, var objB)
{
	const MAX_RANDOM_LINES = 2;
	var random;

	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case entranceObject:
					Actor_talkEgo("There is no point in leaving now.");
					break;
				default:
					Actor_talkEgo("Hmmm no.");
					break;
			}
			break;
		case verbLookAt:
			random = Util_getRandomNumber(MAX_RANDOM_LINES);
			switch (random)
			{
				case 0:
					Actor_talkEgo("That's my whip.");
					break;
				case 1:
					Actor_talkEgo("It can be useful in the right spot.");
					break;
				case 2:
					Actor_talkEgo("It's my favorite piece of equipment.");
					break;
			}
			break;
	}
}

function matchesInvObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("I used them to light the torch...");
			Script_waitForMessage();
			Actor_talkEgo("...but unfortunatly they got wet due to the rain outside.");
			break;
	}
}

function ringInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case iceObject:
					Actor_talkEgo("Hmmm... I guess we should implement this soon.");
					break;
				default:
					Actor_talkEgo("I don't want to marry that.");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a nice golden ring.");
			break;
	}
}

function daggerInvObject_verb(var objA, var objB)
{
	const DELAY = 40;
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case wallObject:
					cutscene (CUTSCENE_TYPE_A)
					{
						Actor_talkEgo("Hmm. Maybe I can use one of these stones.");
						Script_waitForMessage();
						Actor_face(actorIndy, objA);
						Actor_animate(actorIndy, indyCostume_pickUpLow); 
						Script_delay(DELAY);
						Actor_pickup(angularStoneInvObject);
						Actor_pickup(pointyStoneInvObject);
						Actor_animate(actorIndy, indyCostume_stand);
						Actor_talkEgo("Oh, I actually got two stones.");
					}
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It looks like if it has been grinded just a few days ago!");
			break;
	}
}

function unlitTorchInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case flintstonesInvObject:			
					lightRoom();			
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a regular torch.");
			break;
	}
}

function litTorchInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case iceObject:
					Actor_talkEgo("Maybe I can melt the ice with the torch.");
					Script_waitForMessage();

					break;
				default:
					Actor_talkEgo("I don't want to burn that!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It's burning now.");
			break;
	}
}

function boneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case tornRopeInvObject:
					Actor_talkEgo("I'll bind it onto the rope.");
					Script_waitForMessage();
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's the left fibula of the skeleton.");
			break;
	}
}

function angularStoneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case pointyStoneInvObject:
					Actor_pickup(flintstonesInvObject);
					Object_setOwner(pointyStoneInvObject, 0);
					Object_setOwner(angularStoneInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("Hey, that's a firestone!");
			break;
	}
}

function pointyStoneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case angularStoneInvObject:
					Actor_pickup(flintstonesInvObject);
					Object_setOwner(angularStoneInvObject, 0);
					Object_setOwner(pointyStoneInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("Hey, that's a firestone!");
			break;
	}
}

function flintstonesInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case unlitTorchInvObject:			
					lightRoom();			
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("These are firestones.");
			break;
	}
}
