// Global variables
var torchIsLit;

function whipInvObject_verb(var objA, var objB)
{
	const MAX_RANDOM_LINES = 2;
	var random;

	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case entranceObject:
					Actor_talkEgo("There is no point in leaving now.");
					break;
				default:
					Actor_talkEgo("Hmmm no.");
					break;
			}
			break;
		case verbLookAt:
			random = Util_getRandomNumber(MAX_RANDOM_LINES);
			switch (random)
			{
				case 0:
					Actor_talkEgo("That's my whip.");
					break;
				case 1:
					Actor_talkEgo("It can be useful in the right spot.");
					break;
				case 2:
					Actor_talkEgo("It's my favorite piece of equipment.");
					break;
			}
			break;
	}
}

function matchesInvObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("I used them to light the torch...");
			Script_waitForMessage();
			Actor_talkEgo("...but unfortunatly they got wet due to the rain outside.");
			break;
	}
}

function ringInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case iceObject:
					Actor_talkEgo("Hmmm... I guess we should implement this soon.");
					break;
				default:
					Actor_talkEgo("I don't want to marry that.");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a nice golden ring.");
			break;
	}
}

function runeStoneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("Hmmm, no release date yet...");
			Script_waitForMessage();
			Actor_turnToDirection(ACTOR_DIR_SOUTH);
			Actor_talkEgo("Looks like these guys need some help.");
			break;
	}
}

function daggerInvObject_verb(var objA, var objB)
{
	const DELAY = 40;
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case wallObject:
					if (Object_getOwner(flintstonesInvObject) == actorIndy || Object_getOwner(pointyStoneInvObject) == actorIndy)
						Actor_talkEgo("I don't need more stones.");
					else
						cutscene (CUTSCENE_TYPE_A)
						{
							Actor_talkEgo("Hmm. Maybe I can use one of these stones.");
							Script_waitForMessage();
							Actor_face(actorIndy, objA);
							Actor_animate(actorIndy, indyCostume_pickUpLow); 
							Script_delay(DELAY);
							Actor_pickup(angularStoneInvObject);
							Actor_pickup(pointyStoneInvObject);
							Actor_animate(actorIndy, indyCostume_stand);
							Actor_talkEgo("Oh, I actually got two stones.");
						}
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It looks like it has been forged just a few days ago.");
			break;
	}
}

function unlitTorchInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case flintstonesInvObject:			
					// Change unlit torch to lit torch
					Actor_pickup(litTorchInvObject1);
					Object_setOwner(unlitTorchInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a regular torch.");
			break;
	}
}

function litTorchInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case iceObject:
					Actor_talkEgo("Maybe I can melt the ice with the torch.");
					Script_waitForMessage();

					break;
				default:
					Actor_talkEgo("I don't want to burn that!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It's burning now.");
			break;
	}
}

function boneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case tornRopeInvObject:
					Actor_talkEgo("I'll bind it onto the rope.");
					Script_waitForMessage();
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's the left fibula of the skeleton.");
			break;
	}
}

function angularStoneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case pointyStoneInvObject:
					Actor_pickup(flintstonesInvObject);
					Object_setOwner(pointyStoneInvObject, 0);
					Object_setOwner(angularStoneInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("Hey, that's a firestone!");
			break;
	}
}

function pointyStoneInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case angularStoneInvObject:
					Actor_pickup(flintstonesInvObject);
					Object_setOwner(angularStoneInvObject, 0);
					Object_setOwner(pointyStoneInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("Hey, that's a firestone!");
			break;
	}
}

function flintstonesInvObject_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case unlitTorchInvObject:
					// Change unlit torch to lit torch
					Actor_pickup(litTorchInvObject1);
					Object_setOwner(unlitTorchInvObject, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("These are firestones.");
			break;
	}
}
