function invWhip_verb(var objA, var objB)
{
	const MAX_RANDOM_LINES = 2;
	var random;

	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case objHole:
					if (!whipout)
					{
					Actor_talkEgo("There is no point in leaving now.");

					}
					else
					{
					Actor_talkEgo("Harald, I found the rune stone!");
					Script_waitForMessage();
					Actor_talkEgo("I'll throw you the whip.  Pull me up!");
					Script_waitForMessage();
					Actor_talkEgo("Here you go.  Catch!");
					Script_waitForMessage();
					Script_delaySeconds(1);
					Actor_talk(actorHarald, "OK. I've got it.  I'll pull you up now.");
					Script_waitForMessage();
					Room_load(roomTheEnd);
					}
					break;
				default:
					Actor_talkEgo("Hmmm no.");
					break;
			}
			break;
		case verbLookAt:
			random = Util_getRandomNumber(MAX_RANDOM_LINES);
			switch (random)
			{
				case 0:
					Actor_talkEgo("That's my whip.");
					break;
				case 1:
					Actor_talkEgo("It can be useful in the right spot.");
					break;
				case 2:
					Actor_talkEgo("It's my favorite piece of equipment.");
					break;
			}
			break;
	}
}

function invMatches_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("I used them to light the torch...");
			Script_waitForMessage();
			Actor_talkEgo("...but unfortunatly they got wet due to the rain outside.");
			break;
	}
}

function invTornRope_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("Good ropes are rare.");
			break;
	}
}

function invGasCan_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case objIce:
					if (iceCaveWallState == ICE_CAVE_WALL_ICED)
					{
						// TODO: Drawing - Make the ice wall full of gasoline
						Actor_talkEgo("That should do it.");
						iceCaveWallState = ICE_CAVE_WALL_GAS;
					}
					else 
					{
						Actor_talkEgo("It doesn't need more gas.");
					}
					break;
				default:
					Actor_talkEgo("I don't want to burn that.");
					break;
			}
			break;
		case verbLookAt:
			if (iceCaveWallState == ICE_CAVE_WALL_ICED)
				Actor_talkEgo("It's full of gasoline.");
			else
				Actor_talkEgo("There's some gasoline left.");
			break;
	}
}

function invRing_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case objIce:
					if (iceCaveWallState == ICE_CAVE_WALL_BURNED) 
					{
						// TODO: Draw ring onto the wall
						Actor_talkEgo("It fits!");
						ringed = true;
						Object_setOwner(invRing, 0);
						if (Object_getOwner(invDagger) != VAR_EGO)
							iceCaveWallState = ICE_CAVE_WALL_FIXED;
					}
					else
						Actor_talkEgo("That doesn't work.");
					break;
				default:
					Actor_talkEgo("I don't want to marry that.");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a nice golden ring.");
			break;
	}
}

function invRuneStone_verb(var objA, var objB)
{
	action
	{
		case verbLookAt:
			Actor_talkEgo("It's full of SCUMM. I'll have to clean it up when I get back.");
			break;
	}
}

function invDagger_verb(var objA, var objB)
{
	const DELAY = 40;
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case objWall:
					if (Object_getOwner(invFlintstones) == actorIndy || Object_getOwner(invPointyStone) == actorIndy)
						Actor_talkEgo("I don't need more stones.");
					else
						cutscene (CUTSCENE_TYPE_A)
						{
							Actor_talkEgo("Hmm. Maybe I can use one of these stones.");
							Script_waitForMessage();
							Actor_face(actorIndy, objA);
							Actor_animate(actorIndy, costIndy_pickUpLow); 
							Script_delay(DELAY);
							Actor_pickup(invAngularStone);
							Actor_pickup(invPointyStone);
							Actor_animate(actorIndy, costIndy_stand);
							Actor_talkEgo("Oh, I actually got two stones.");
						}
					break;
				case objIce:
					if (iceCaveWallState == ICE_CAVE_WALL_BURNED) 
					{
						// TODO: Draw dagger onto the wall (stamp)
						if (ringed == true)
						{

							Actor_talkEgo("That fits perfectly!");
							Object_setOwner(invRing, 0);
							if (Object_getOwner(invRing) != VAR_EGO)
							iceCaveWallState = ICE_CAVE_WALL_FIXED;
						}
						else
						{

							Actor_talkEgo("It won't stay in position.");																Script_waitForMessage();
							Actor_talkEgo("I think the cylindrical slot needs to be filled first.");	
						}
				
	
					}
					else
						Actor_talkEgo("That doesn't work.");
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It looks like it has been forged just a few days ago.");
			break;
	}
}

function objUnlitTorch_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case invFlintstones:
					if (!torchunlightable)
						{
						Actor_pickup(invLitTorch1);
						Object_setOwner(invUnlitTorch, 0);
						}
					else
						Actor_talkEgo("I'll wait until I'm in the cave to light it.");
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a regular torch.");
			break;
	}
}

function invLitTorch1_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case objIce:
					if (iceCaveWallState == ICE_CAVE_WALL_ICED) 
					{
						Actor_talkEgo("It would take me ages to burn this massive ice wall...");
						Script_waitForMessage();
						torched = true;
						Actor_talkEgo("I need some accelerant.");

						// Dialog_addLine(_dialogHarald, HARALD_TOPIC_ROOT, HARALD_LINE_BURN, "Harald, I need something flammable!");
					}
					else if (iceCaveWallState == ICE_CAVE_WALL_GAS)
					{
						// TODO: Burn animation
						Actor_talkEgo("Woah, ho!");
						Script_waitForMessage();
						Actor_talkEgo("Hey, there are some carvings behind the ice.");
						iceCaveWallState = ICE_CAVE_WALL_BURNED;
						asm { pushWord .word objIce setObjectName .string "console" }
					}
					else
						Actor_talkEgo("I've already melted the ice.");
					break;
				default:
					Actor_talkEgo("I don't want to burn that!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("It's burning now.");
			break;
	}
}

function invBone_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case invWhip:
					break;
				case invTornRope:
					//Actor_talkEgo("I'll tie it to the rope.");
					// DONT use torn rope -> too short!!
					Script_waitForMessage();
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's the left fibula of the skeleton.");
			break;
	}
}

function invAngularStone_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case invPointyStone:
					Actor_pickup(invFlintstones);
					Object_setOwner(invPointyStone, 0);
					Object_setOwner(invAngularStone, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("That's a really strange looking stone.");
			break;
	}
}

function invPointyStone_verb(var objA, var objB)
{
	action
	{
		case verbUse:
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case invAngularStone:
					Actor_pickup(invFlintstones);
					Object_setOwner(invAngularStone, 0);
					Object_setOwner(invPointyStone, 0);
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("Hey, that's a firestone!");
			break;
	}
}

function invFlintstones_verb(var objA, var objB)
{
	action
	{
		case verbUse:		
			switch (objB)
			{
				case 0:
					Sentence_setPrepo(PREPO_ON);
					break;
				case invUnlitTorch:
					if (!torchunlightable)
						{
						Actor_pickup(invLitTorch1);
						Object_setOwner(invUnlitTorch, 0);
						}
					else
						Actor_talkEgo("I'll wait until I'm in the cave to light it.");
					break;
				default:
					Actor_talkEgo("That doesn't work!");
					break;
			}
			break;
		case verbLookAt:
			Actor_talkEgo("I can use them to make fire.");
			break;
	}
}
