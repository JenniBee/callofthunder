// Global constants
const STEP_DIST_X = 7;
const STEP_DIST_Y = 4;
const ANIM_SPEED = 1;
const N_ANIMATED_OBJECTS = 1;
const PICK_UP_DELAY = 30;

// Actors list
actor actorIndy;
actor actorHarald;
actor actorTemp;

// Torch animation definitions
const INV_OBJ_TORCH_N_FRAMES = 4;
const INV_OBJ_TORCH_DELAY1 = 5;
const INV_OBJ_TORCH_DELAY2 = 10;
const INV_OBJ_TORCH_DELAY3 = 15;
const INV_OBJ_TORCH_DELAY4 = 20;

// Animated objects enumeration
enum { INV_OBJ_TORCH };

// Private functions
function _Game_setupRooms()
{
	roomIceCaveMechanism_init();
	roomIceCave_init();
}

function _Game_setupActors()
{
	// Setup Indy
	Actor_setCurrent(actorIndy);
	asm { actorOps actorName .string "Indy" }
	Actor_setCostume(costIndy);
	Actor_setInitAnim(costIndy_stand);
	Actor_setStandAnim(costIndy_stand);
	Actor_setWalkAnim(costIndy_walk);
	Actor_setTalkAnim(costIndy_talk, costIndy_stand);
	Actor_setStepDistance(STEP_DIST_X, STEP_DIST_Y);
	Actor_setAnimSpeed(ANIM_SPEED);
	Actor_setTalkColor(COLOR_WHITE);
	Actor_printLoadDefault(actorIndy);
	Actor_printCenter();
	Actor_printOverhead();
	Actor_printSaveDefault();
	VAR_EGO = actorIndy;

	// Setup Harald
	Actor_setCurrent(actorHarald);
	asm { actorOps actorName .string "Harald" }
	Actor_ignoreBoxes(1);
	Actor_setTalkColor(COLOR_JAPANESE_LAUREL);
	Actor_printLoadDefault(actorHarald);
	Actor_printCenter();
	Actor_printOverhead();
	Actor_printSaveDefault();
}

function _Game_setupInvObjects()
{
	var frames;
	var delays;

	// Setup torch animation
	frames = [invLitTorch1, invLitTorch2, invLitTorch3, invLitTorch4];
	delays = [INV_OBJ_TORCH_DELAY1, INV_OBJ_TORCH_DELAY2, INV_OBJ_TORCH_DELAY3, INV_OBJ_TORCH_DELAY4];
	Inventory_addAnimatedObject(INV_OBJ_TORCH, invLitTorch1, INV_OBJ_TORCH_N_FRAMES, frames, delays);
}

// Public functions
function Game_init()
{
	// Initialize game "classes"
	Input_init();
	Inventory_init();
	Sentence_init();
	Dialog_init();
	Cutscene_init();
	Light_init();

	// Setup default game resources
	_Game_setupRooms();
	_Game_setupActors();
	_Game_setupInvObjects();
}

function Game_roomPreEntry()
{
	var i;
	var animatedObject;

	// Restart timer 1 and animated inventory object delays
	VAR_TMR_1 = 0;
	for (i = 0; i < N_ANIMATED_OBJECTS; i++)
	{
		animatedObject = animatedObjects[i];
		animatedObject[ANIMATED_OBJ_START_DELAY] = 0;
	}

	// Set room height before entering it
	Room_setScreen(0, VAR_ROOM_HEIGHT);

	// Build room map
	Room_createBoxMatrix();
}

function Game_roomPreExit()
{
}
