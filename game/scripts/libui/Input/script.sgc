// Global constants
const MOUSE_BUTTON_2 = 2;
const AREA_VERB = 1;
const AREA_ROOM = 2;
const AREA_KEYBOARD = 4;

// Global variables
var _mouseEnabled;

// Private functions
function _Input_click(var area, var cmd, var btn)
{
	// Indicate to the different UI classes that a click occured
	Inventory_click(cmd, btn);
	Sentence_click(area, cmd, btn);
}

function _Input_handler(var area, var cmd, var btn)
{
	// Switch to the appropriate sub handler
	switch (area)
	{
		case AREA_KEYBOARD:
			while (Script_isRunning(_Input_keyPress))
				Script_break();
			_Input_keyPress(cmd);
			break;
		default:
			if (_mouseEnabled)
			{
				while (Script_isRunning(_Input_click))
					Script_break();
				_Input_click(area, cmd, btn);
			}
			break;
	}
}

function _Input_keyPress(var key)
{
}

thread _Input_mouseMove()
{
	while (_mouseEnabled)
	{
		// Indicate to the different UI classes that a click occured
		Sentence_mouseMove();
		Script_break();
	}
}

inline function _Input_setKeys()
{
	// As long as these are defined, they are active - we can't control which keys are actually used
	// to perform those actions
	VAR_CUTSCENEEXIT_KEY = 1;
	VAR_RESTART_KEY = 1;
	VAR_PAUSE_KEY = 1;
	VAR_MAINMENU_KEY = 1;
	VAR_TALKSTOP_KEY = 1;
}

// Public functions
function Input_disableMouse()
{
	// Disable mouse and let scheduler terminate the mouse move thread
	_mouseEnabled = 0;
	Script_break();

	// Hide cursor
	Interface_activateCursor(0);
}

inline function Input_enableMouse()
{
	// Show cursor
	Interface_activateCursor(1);

	// Enable mouse
	_mouseEnabled = 1;

	// Launch mouse move thread
	_Input_mouseMove();
}

function Input_init()
{
	// Mouse is disabled by default
	_mouseEnabled = 0;

	// Engine input is always enabled
	Interface_activateUserput(1);

	// Set engine keys
	_Input_setKeys();

	// Tell SCUMM engine which script will be our input handler
	VAR_VERB_SCRIPT = _Input_handler;
}
