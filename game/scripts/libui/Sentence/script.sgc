// Sentence verbs
verb verbGive;
verb verbPickUp;
verb verbUse;
verb verbOpen;
verb verbTalkTo;
verb verbPush;
verb verbClose;
verb verbLookAt;
verb verbPull;
verb verbWalk;
const N_VISIBLE_VERBS = 9; // Walk is not a visible verb

// Inventory slots
verb verbInvSlot1;
verb verbInvSlot2;
verb verbInvSlot3;
verb verbInvSlot4;
verb verbInvSlot5;
verb verbInvSlot6;
verb verbInvSlot7;
verb verbInvSlot8;
verb verbInvSlot9;
verb verbInvSlot10;

// Enums
enum { PREPO_ON, PREPO_TO, PREPO_WITH, PREPO_NONE };
enum { OBJ_OBJECT, OBJ_ACTOR, OBJ_INVENTORY, OBJ_NONE };

// Sentence line verb
verb verbSentenceLine;

// Private variables
var _sentenceVisible;
var _object;
var _objectType;
var _sentenceVerb;
var _selectedVerb;
var _sentenceObjA;
var _selectedObjA;
var _sentenceObjB;
var _selectedObjB;
var _sentencePrepo;
var _alternateVerb;
var _defaultPickUpString;
var _defaultUseString;
var _defaultOpenString;
var _defaultPushPullString;
var _defaultCloseString;
var _prepoOnString;
var _prepoToString;
var _prepoWithString;

// Private functions
inline function _Sentence_draw()
{
	Verb_setCurrent(verbSentenceLine);
	Verb_draw();
}

inline function _Sentence_getObject()
{
	// Object check
	_object = Object_find(VAR_VIRT_MOUSE_X, VAR_VIRT_MOUSE_Y);
	if (_object != 0)
	{
		_objectType = OBJ_OBJECT;
		return;
	}

	// Actor check
	_object = Actor_getFromXY(VAR_VIRT_MOUSE_X, VAR_VIRT_MOUSE_Y);
	if (_object != 0)
	{
		_objectType = OBJ_ACTOR;
		return;
	}

	// Inventory object check
	_object = Inventory_getObject(VAR_EGO, VAR_MOUSE_X, VAR_MOUSE_Y);
	if (_object != 0)
	{
		_objectType = OBJ_INVENTORY;
		return;
	}

	// Nothing found
	_objectType = OBJ_NONE;
}

inline function _Sentence_handleSpecialCases()
{
	// 1. If the sentence first object has been selected and _object is the same,
	// then discard it
	if ((_selectedObjA != 0) && (_object == _selectedObjA))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}
		
	// 2. If the current verb is Walk and _object is either an object or an actor,
	// then change the verb name to "Walk to", otherwise, reset it to "Walk"
	if ((_sentenceVerb == verbWalk) && ((_objectType == OBJ_OBJECT) || (_objectType == OBJ_ACTOR)))
	{
		Verb_setCurrent(verbWalk);
		Verb_setNameString("Walk to");
	}
	else
	{
		Verb_setCurrent(verbWalk);
		Verb_setNameString("Walk");
	}

	// 3. If _object is an actor and it's VAR_EGO, discard it
	if ((_objectType == OBJ_ACTOR) && (_object == VAR_EGO))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 4. If the current verb is Walk and _object is an inventory object,
	// then change the sentence verb to Look At
	if ((_selectedVerb == verbWalk) && (_objectType == OBJ_INVENTORY))
		 _sentenceVerb = verbLookAt;

	// 5. If the current verb is Give and the first object has not been selected,
	// then make sure the first object is not an actor, otherwise discard it
	if ((_sentenceVerb == verbGive) && (_selectedObjA == 0) && (_objectType == OBJ_ACTOR))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 6. If the current verb is Give and the first object of the sentence is selected already,
	// then make sure the second object is an actor, otherwise discard it
	if ((_sentenceVerb == verbGive) && (_selectedObjA != 0) && (_objectType != OBJ_ACTOR))
	{
		_object = 0;
		_objectType = OBJ_NONE;
	}

	// 7. If the current verb is Give, then set the preposition to "to" if the first object
	// of the sentence is selected, otherwise clear the preposition
	if (_sentenceVerb == verbGive)
		if (_selectedObjA != 0)
			Sentence_setPrepo(PREPO_TO);
		else
			Sentence_setPrepo(PREPO_NONE);
}

inline function _Sentence_isComplete()
{
	// Depending on which verb is active and which element has been selected,
	// we can tell if the sentence if complete or not
	switch (_sentenceVerb)
	{
		case verbGive:
			return (_selectedObjB != 0);
		case verbPickUp:
			return (_selectedObjA != 0);
		case verbUse:
			return (((_selectedObjA != 0) && (_sentencePrepo == 0)) || (_selectedObjB != 0));
		case verbOpen:
			return (_selectedObjA != 0);
		case verbTalkTo:
			return (_selectedObjA != 0);
		case verbPush:
			return (_selectedObjA != 0);
		case verbClose:
			return (_selectedObjA != 0);
		case verbLookAt:
			return (_selectedObjA != 0);
		case verbPull:
			return (_selectedObjA != 0);
		case verbWalk:
			return (_selectedObjA != 0);
	}
}

inline function _Sentence_setAlternateVerb(var vrb)
{
	if (vrb != _alternateVerb)
	{
		// Reset current alternate verb color
		Verb_setCurrent(_alternateVerb);
		Verb_setColor(COLOR_VERB_NORMAL);
		Verb_draw();

		// Change alternate verb
		_alternateVerb = vrb;

		// Set color if needed
		if (_alternateVerb != 0)
		{
			Verb_setCurrent(_alternateVerb);
			Verb_setColor(COLOR_VERB_HI);
			Verb_draw();
		}
	}
}

inline function _Sentence_select()
{
	// Select verb elements previously detected
	_selectedObjA = _sentenceObjA;
	_selectedObjB = _sentenceObjB;
}

inline function _Sentence_setVerb(var vrb)
{
	// Set sentence elements
	_sentenceVerb = vrb;
	_selectedVerb = vrb;
	_sentenceObjA = 0;
	_selectedObjA = 0;
	_sentenceObjB = 0;
	_selectedObjB = 0;
	Sentence_setPrepo(PREPO_NONE);

	// Reset any found object
	_object = 0;
	_objectType = OBJ_NONE;
}

inline function _Sentence_update()
{
	// Set sentence verb to the selected one
	_sentenceVerb = _selectedVerb;

	// Handle special cases first
	_Sentence_handleSpecialCases();

	// Update sentence elements
	if (_selectedObjA == 0)
	{
		_sentenceObjB = 0;
		_sentenceObjA = _object;
	}
	else
		_sentenceObjB = _object;

	// Update alternate verb
	switch (_objectType)
	{
		case OBJ_OBJECT:
			// TODO: check object class
			_Sentence_setAlternateVerb(verbLookAt);
			break;
		case OBJ_ACTOR:
			_Sentence_setAlternateVerb(verbTalkTo);
			break;
		case OBJ_INVENTORY:
			_Sentence_setAlternateVerb(verbLookAt);
			break;
		case OBJ_NONE:
			_Sentence_setAlternateVerb(0);
			break;
	}
}

// Public functions
function Sentence_click(var area, var cmd, var btn)
{
	// Check if sentence if visible first
	if (!_sentenceVisible)
		return;

	// Wait until the sentence has been fully updated
	while (Script_isRunning(Sentence_mouseMove))
		Script_break();

	// Verb click
	if (Util_isAnyOf(cmd, [verbGive, verbPickUp, verbUse, verbOpen, verbTalkTo, verbPush, verbClose, verbLookAt, verbPull], N_VISIBLE_VERBS))
	{
		// Set sentence verb
		_Sentence_setVerb(cmd);
		return;
	}

	// If no element has been clicked, just restore the default Walk verb if it's not set already,
	// otherwise walk to the mouse pointer location
	if (_objectType == OBJ_NONE)
	{
		_Sentence_setVerb(verbWalk);
		return;
	}

	// Select elements of the sentence
	_Sentence_select();
	
	// Launch the verb sentence
	Verb_doSentence(_sentenceVerb, _selectedObjA, _selectedObjB);
	Script_break();

	// Wait until the script has been executed fully
	while (Script_isRunning(VAR_SENTENCE_SCRIPT))
		Script_break();

	// Change verb back to default if the sentence is complete
	if (_Sentence_isComplete())
		_Sentence_setVerb(verbWalk);
}

function Sentence_handler(var vrb, var objA, var objB)
{
	var entryPt;

	// Check is the verb is handled by the selected object
	entryPt = Verb_getEntryPoint(objA, vrb);

	// Set charset used for actors
	Interface_setCharset(font2);

	// If the verb is not handled, say default sentences
	if (entryPt != 0)
	{
		Script_startObjectScriptQuick(objA, vrb, [objA, objB], 2);
		return;
	}
	
	// Default verb actions	
	switch (vrb)
	{
		case verbPickUp:
			Actor_talkEgo(_defaultPickUpString);
			break;
		case verbUse:
			Actor_talkEgo(_defaultUseString);
			break;
		case verbOpen:
			Actor_talkEgo(_defaultOpenString);
			break;
		case verbPush:
		case verbPull:
			Actor_talkEgo(_defaultPushPullString);
			break;
		case verbClose:
			Actor_talkEgo(_defaultCloseString);
			break;
	}		
}

function Sentence_hide()
{
	Verb_setCurrent(verbSentenceLine);
	Verb_activate(0);
	Verb_draw();

	_sentenceVisible = 0;
}

function Sentence_init()
{
	const VERB_SENTENCE_LINE_X = 160;
	const VERB_SENTENCE_LINE_Y = 144;

	// Create default verb
	Verb_setCurrent(verbWalk);
	Verb_new();
	Verb_setNameString("Walk");
	_Sentence_setVerb(verbWalk);

	// Add sentence line verb
	Verb_setCurrent(verbSentenceLine);
	Verb_new();
	Verb_setNameString("%v{_sentenceVerb} %n{_sentenceObjA} %s{_sentencePrepo} %n{_sentenceObjB}");
	Verb_center();
	Verb_setColor(COLOR_AQUAMARINE);
	Verb_setBackColor(COLOR_BLACK);
	Verb_setDimColor(COLOR_AQUAMARINE);
	Verb_setHiColor(COLOR_AQUAMARINE);
	Verb_setPos(VERB_SENTENCE_LINE_X, VERB_SENTENCE_LINE_Y);
	
	// Default action strings
	_defaultPickUpString = "I can't pick that up.";
	_defaultUseString = "I don't think that will work.";
	_defaultOpenString = "It doesn't seem to open.";
	_defaultPushPullString = "I can't move it.";
	_defaultCloseString = "It doesn't seem to close.";

	// Preposition strings	
	_prepoOnString = "on";
	_prepoToString = "to";
	_prepoWithString = "with";

	// Sentence is invisible by default
	_sentenceVisible = 0;
}

function Sentence_mouseMove()
{
	// Check if sentence if visible first
	if (!_sentenceVisible)
		return;

	_Sentence_getObject();
	_Sentence_update();
	_Sentence_draw();
}

inline function Sentence_setPrepo(var prepo)
{
	// Change preposition
	switch (prepo)
	{
		case PREPO_ON:
			_sentencePrepo = _prepoOnString;
			break;
		case PREPO_TO:
			_sentencePrepo = _prepoToString;
			break;
		case PREPO_WITH:
			_sentencePrepo = _prepoWithString;
			break;
		case PREPO_NONE:
			_sentencePrepo = 0;
	}
}

function Sentence_show()
{
	// Redraw sentence
	Verb_setCurrent(verbSentenceLine);
	Verb_activate(1);
	Verb_draw();

	// Sentence is now visible
	_sentenceVisible = 1;
}
