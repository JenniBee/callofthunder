// Global constants
const VERB_DIALOG_X = 0;
const VERB_DIALOG_Y = 144;
const LINE_X = 2;
const LINE_Y = 152;
const LINE_STEP = 10;
const N_DIALOG_LINES = 5;

// Dialog verbs
verb verbDialog;
verb verbLine1;
verb verbLine2;
verb verbLine3;
verb verbLine4;
verb verbLine5;

// Line strings
var _line1;
var _line2;
var _line3;
var _line4;
var _line5;

// Global variables
var _dialogEnabled;
var _selection;

// Private functions
inline function _Dialog_addLineVerb(var vrb, var index)
{
	// Add verb
	Verb_setCurrent(vrb);
	Verb_new();
	Verb_setColor(areaNormal_start);
	Verb_setBackColor(areaBack_start);
	Verb_setDimColor(areaDim_start);
	Verb_setHiColor(areaHi_start);
	Verb_setPos(LINE_X, LINE_Y + index * LINE_STEP);
}

inline function _Dialog_hideLineVerbs()
{
	// Hide verbs
	var i;
	for (i = 0; i < N_DIALOG_LINES; i++)
	{
		Verb_setCurrent(verbLine1 + i);
		Verb_activate(0);
		Verb_draw();
	}
}

// Public functions
inline function Dialog_addLine(var dialog, var string)
{
	var index;

	// Look for a free spot
	for (index = 0; index < N_DIALOG_LINES; index++)
		if (dialog[index] == 0)
			break;

	// If we reached the maximum number of lines, we quit
	if (index == N_DIALOG_LINES)
	{
		Util_printDebug("Dialog_add: reached the maximum number of lines !");
		Util_quit();
	}

	// Copy string
	dialog[index] = Util_copyString(string);
}

inline function Dialog_click()
{
	// Check if it's the right area
	if (inputArea != AREA_VERB)
		return;

	// Get and display selection
	if (Util_isAnyOf(inputCmd, [verbLine1, verbLine2, verbLine3, verbLine4, verbLine5], 5))
		_selection = inputCmd - verbLine1;
}

inline function Dialog_delete(var dialog)
{
	var i;
	for (i = 0; i < N_DIALOG_LINES; i++)
		if (dialog[i] != 0)
			Util_nukeArray(dialog[0]);
	Util_nukeArray(dialog);
}

inline function Dialog_disable()
{
	// Hide dialog
	Dialog_hide();

	// Re-enable inventory
	Inventory_enable();

	// Dialog is now disabled
	_dialogEnabled = 0;
}

inline function Dialog_enable()
{	
	// Dialog is now enabled
	_dialogEnabled = 1;

	// Disable inventory first
	Inventory_disable();

	// Show dialog
	Dialog_show(0);
}

inline function Dialog_hide()
{
	var i;

	// If dialog is disabled, return
	if (!_dialogEnabled)
		return;

	// Hide dialog background
	Verb_setCurrent(verbDialog);
	Verb_activate(0);
	Verb_draw();

	// Hide dialog lines
	_Dialog_hideLineVerbs();
}

function Dialog_init()
{
	var i;

	// Setup charset
	Interface_setCharset(font1);
	Interface_printTextLoadDefault();
	Interface_printTextLeft();
	Interface_printTextColor(areaHi_start);
	Interface_printTextSaveDefault();

	// Create dialog background
	Verb_setCurrent(verbDialog);
	Verb_new();
	Verb_setImage(dialogObject);
	Verb_setPos(VERB_DIALOG_X, VERB_DIALOG_Y);

	// Setup line verbs
	for (i = 0; i < N_DIALOG_LINES; i++)
		_Dialog_addLineVerb(verbLine1 + i, i);

	// Dialog is disabled by default
	_dialogEnabled = 0;
}

inline function Dialog_new()
{
	var dialog;
	var i;
	dialog = Util_dimArray(ARRAY_INT, N_DIALOG_LINES);
	for (i = 0; i < N_DIALOG_LINES; i++)
		dialog[i] = 0;
	return dialog;
}

inline function Dialog_removeLine(var dialog, var index)
{
	if (index >= N_DIALOG_LINES)
	{
		Util_printDebug("Dialog_delete: index is invalid !");
		Util_quit();
	}

	Util_nukeArray(dialog[index]);
	dialog[index] = 0;
}

inline function Dialog_show(var dialog)
{	
	var i;
	var currentLine;
	var s;

	// If dialog is disabled, return
	if (!_dialogEnabled)
		return;

	// Hide dialog lines first
	_Dialog_hideLineVerbs();

	// Draw dialog background
	Verb_setCurrent(verbDialog);
	Verb_activate(1);
	Verb_draw();

	// Return if no dialog has been passed as an argument
	if (dialog == 0)
		return;

	// Draw dialog lines
	currentLine = 0;
	for (i = 0; i < N_DIALOG_LINES; i++)
	{
		// Check if line is valid
		if (dialog[i] == 0)
			continue;

		// Set current verb
		Verb_setCurrent(verbLine1 + currentLine);

		// Update line string
		switch (currentLine)
		{
			case 0:
				_line1 = dialog[i];
				Verb_setNameString("\x05%s{_line1}");
				break;
			case 1:
				_line2 = dialog[i];
				Verb_setNameString("\x05%s{_line2}");
				break;
			case 2:
				_line3 = dialog[i];
				Verb_setNameString("\x05%s{_line3}");
				break;
			case 3:
				_line4 = dialog[i];
				Verb_setNameString("\x05%s{_line4}");
				break;
			case 4:
				_line5 = dialog[i];
				Verb_setNameString("\x05%s{_line5}");
				break;
		}

		// Draw verb
		Verb_activate(1);
		Verb_draw();

		// Update current line
		currentLine++;
	}
}

inline function Dialog_waitForSelection(var dialog)
{
	var index;
	var currentLine;

	// Initialize selection
	_selection = -1;

	// Wait until a dialog line has been selected
	while (_selection == -1)
		Script_break();

	// Clear dialog
	Dialog_show(0);
	
	// Display selected line
	Actor_talkEgo(_line1 + _selection);
	Script_waitForMessage();

	// Get selected dialog line
	currentLine = 0;
	for (index = 0; index < N_DIALOG_LINES; index++)
	{
		// Don't update index if dialog line is not valid
		if (dialog[index] == 0)
			continue;

		// We reached our selection
		if (currentLine == _selection)
			break;

		// Increment current line
		currentLine++;
	}

	// Return dialog index
	return index;
}
