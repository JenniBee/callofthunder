// Global constants
const MOUSE_BUTTON_2 = 2;
const AREA_VERB = 1;
const AREA_ROOM = 2;
const AREA_KEYBOARD = 4;

// Global variables
var _enabled;
var inputArea;
var inputCmd;
var inputBtn;
var mouseX;
var mouseY;

// Private functions
inline function _Input_click()
{
	// Save mouse coordinates
	mouseX = VAR_MOUSE_X;
	mouseY = VAR_MOUSE_Y;

	// Indicate to the different UI classes that a click occured
	Inventory_click();
	Sentence_click();
	Dialog_click();
}

function _Input_handler(var area, var cmd, var btn)
{
	// Save parameters
	inputArea = area;
	inputCmd = cmd;
	inputBtn = btn;

	// Switch to the appropriate sub handler
	switch (area)
	{
		case AREA_KEYBOARD:
			_Input_keyPress();
			break;
		default:
			_Input_click();
			break;
	}
}

inline function _Input_initCursor()
{
	const RESOURCE_ROOM = 1;
	const CURSOR_HOTSPOT_X = 7;
	const CURSOR_HOTSPOT_Y = 7;

	// Set cursor image
	Interface_setCursorImage(cursorObject, RESOURCE_ROOM);

	// Enable cursor transparency
	Interface_setCursorTransparentColor(0);

	// Set cursor hotspot
	Interface_setCursorHotspot(CURSOR_HOTSPOT_X, CURSOR_HOTSPOT_Y);
}

function _Input_keyPress()
{
}

thread _Input_mouseMove()
{
	while (_enabled)
	{
		// Indicate to the different UI classes that a click occured
		Sentence_mouseMove();
		Script_break();
	}
}

inline function _Input_setKeys()
{
	// As long as these are defined, they are active - we can't control which keys are actually used
	// to perform those actions
	VAR_CUTSCENEEXIT_KEY = 1;
	VAR_RESTART_KEY = 1;
	VAR_PAUSE_KEY = 1;
	VAR_MAINMENU_KEY = 1;
	VAR_TALKSTOP_KEY = 1;
}

// Public functions
inline function Input_disable()
{
	// Disable input and hide cursor
	Interface_activateUserput(0);
	Interface_activateCursor(0);
	_enabled = 0;
}

inline function Input_enable()
{
	// Show cursor and activate input
	Interface_activateCursor(1);
	Interface_activateUserput(1);
	_enabled = 1;

	// Launch mouse move thread
	_Input_mouseMove();
}

function Input_init()
{
	// Input is disabled by default
	_enabled = 0;

	// Set engine keys
	_Input_setKeys();

	// Initialize cursor
	_Input_initCursor();

	// Tell SCUMM engine which script will be our input handler
	VAR_VERB_SCRIPT = _Input_handler;
}
